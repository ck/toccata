
;; state-maybe monad with lazy comp*

(defn reduce-args [[arg & args] s]
  (let [result-s (arg s)]
    (match result-s
           |List result new-s|
           (match args
                  empty-list (list (list result) new-s)
                  (match (reduce-args args new-s)
                         |List results final-s|
                         (list (cons result results) final-s))))))

(defn -comp* [mv mvs s]
  (let [x (mv s)]
    (match mvs
           empty-list x
           (match x
                  nothing (-comp* (first mvs) (rest mvs) s)
                  x))))

(deftype new-sm [invoke-fn]
  Stringable
  (string-list [_] (list "<new-sm >"))

  Function
  (invoke [ev s]
    (invoke-fn s))

  Applicative
  (wrap [_ v]
    (new-sm (fn [s]
                (list v s))))
  (apply* [fv args]
    (match args
           empty-list (new-sm (fn [s] (list list s)))
           (new-sm (fn [s]
                     (match (reduce-args args s)
                            |List results s| (let [[f s] (fv s)]
                                               (list (apply f results) s)))))))

  Monad
  (flat-map [ev f]
    (new-sm (fn [s]
              (match (invoke-fn s)
                     |List v ss| ((f v) ss)))))

  Monoid
  (zero [_] nothing)
  (comp* [mv mvs]
    (new-sm (partial -comp* mv mvs))))

(def state-maybe
  (reify
    Function
    (invoke [_ v]
      (new-sm (fn [s]
                (list v s))))

    Monoid
    (zero [_] nothing)))

(defn traverse [coll f]
  (apply* (state-maybe list) (map coll f)))

(defn update-state [f]
  (new-sm (fn [s]
              (list s (f s)))))

(defn get-val
  ([k]
     (new-sm (fn [s]
               (match (m-get s k)
                      |maybe v| (list v s)))))
  ([k nf]
     (new-sm (fn [s]
                 (list (get s k nf) s)))))

(defn set-val [k v]
  (new-sm (fn [s]
              (list (get s k nothing) (assoc s k v)))))

(defn get-in-val
  ([path]
     (new-sm (fn [s]
               (match (get-in s path)
                      |maybe v| (list v s)))))
  ([path nf]
     (new-sm (fn [s]
               (match (get-in s path)
                      nothing (list nf s)
                      |maybe v| (list v s))))))

(defn assoc-in-val [path v]
  (new-sm (fn [s]
              (list v (assoc-in s path v)))))

(defn update-in-val [path f]
  (new-sm (fn [s]
              (list (get-in s path) (update-in s path f)))))

(defn recur-fn [f as s]
  (match (f s)
         nothing (list as s)
         |List v ss| (recur-fn f (cons v as) ss)))

(defn recur [mv]
  (new-sm (fn [s]
            (match (mv s)
                   |List v ss|
                   (match (recur-fn (.invoke-fn mv) (list v) ss)
                          |List x & xs| (cons (reverse x) xs))))))
