
;; state-maybe monad with lazy comp*

(defn reduce-args [[arg & args] s]
  (let [result-s (arg s)]
    (match result-s
           |List result new-s|
           (match args
                  empty-list (list (list result) new-s)
                  (match (reduce-args args new-s)
                         |List results final-s| (list (cons result results) final-s))))))

(defn -comp* [mv mvs s]
  (let [x (mv s)]
    (cond
     (list-empty? mvs) x
     (= nothing x) (let [[mv & mvs] mvs]
                     (-comp* mv mvs s))
     x))
  ;; slow
  ;; (let [x (mv s)]
  ;;   (match mvs
  ;;          empty-list x
  ;;          (match x
  ;;                 nothing (-comp* (first mvs) (rest mvs) s)
  ;;                 x)))
  )

(deftype new-sm [invoke-fn]
  Stringable
  (string-list [_] (list "<new-sm >"))

  Function
  (invoke [ev s]
    (invoke-fn s))

  Applicative
  (wrap [_ v]
    (new-sm (fn [s]
                (list v s))))
  (apply* [fv args]
    (match args
           empty-list (new-sm (fn [s] (list list s)))
           (new-sm (fn [s]
              (let [reduce-state (reduce-args args s)]
                (cond
                 (= nothing reduce-state) nothing
                 (let [[results s] reduce-state
                       [f s] (fv s)]
                   (list (apply f results) s))))))
           ;; slow but not by much
           ;; (new-sm (fn [s]
           ;;           (match (reduce-args args s)
           ;;                  |List results s| (let [[f s] (fv s)]
           ;;                                     (list (apply f results) s))
           ;;                  )))
           ))

  Monad
  (flat-map [ev f]
    (new-sm (fn [s]
              (let [v-ss (invoke-fn s)]
                (cond
                 (= nothing v-ss) v-ss
                 (let [[v ss] v-ss]
                   ((f v) ss))))
              ;; slow
              ;; (match (invoke-fn s)
              ;;        |List v ss| ((f v) ss)
              ;;        )
              )))

  Monoid
  (zero [_] (new-sm (fn [_] nothing)))
  (comp* [mv mvs]
    (new-sm (partial -comp* mv mvs))))

(def state-maybe
  (reify
    Function
    (invoke [_ v]
      (new-sm (fn [s]
                (list v s))))

    Monoid
    (zero [_] (new-sm (fn [_] nothing)))))

(defn traverse [coll f]
  ;; (cond
  ;;  (empty? coll) (state-maybe empty-list)
  ;;  (apply* (state-maybe list) (map coll f)))
  ;; slow
  (apply* (state-maybe list) (map coll f))
  )

(defn update-state [f]
  (new-sm (fn [s]
              (list s (f s)))))

(defn get-val
  ([k]
     (new-sm (fn [s]
               (let [v (m-get s k)]
                 (cond
                  (= nothing v) nothing
                  (list (.v v) s)))
               ;; slow
               ;; (match (m-get s k)
               ;;        |maybe v| (list v s)
               ;;        )
               )))
  ([k nf]
     (new-sm (fn [s]
                 (list (get s k nf) s)))))

(defn set-val [k v]
  (new-sm (fn [s]
              (list (get s k nothing) (assoc s k v)))))

(defn get-in-val
  ([path]
     (new-sm (fn [s]
               (let [v (get-in s path)]
                 (cond
                  (= nothing v) nothing
                  (list (.v v) s)))
               ;; slow
               ;; (match (get-in s path)
               ;;        |maybe v| (list v s)
               ;;        )
               )))
  ([path nf]
     (new-sm (fn [s]
               (let [v (get-in s path)]
                 (cond
                  (= nothing v) (list nf s)
                  (list (.v v) s)))
               ;; slow
               ;; (match (get-in s path)
               ;;        nothing (list nf s)
               ;;        |maybe v| (list v s)
               ;;        )
               ))))

(defn assoc-in-val [path v]
  (new-sm (fn [s]
              (list v (assoc-in s path v)))))

(defn update-in-val [path f]
  (new-sm (fn [s]
              (list (get-in s path) (update-in s path f)))))

(defn recur-fn [f as s]
  (let [v-ss (f s)]
    (cond
     (= nothing v-ss) (list as s)
     (let [[v ss] v-ss]
       (recur-fn f (cons v as) ss))))
  ;; slow
  ;; (match (f s)
  ;;        nothing (list as s)
  ;;        |List v ss| (recur-fn f (cons v as) ss)
  ;;        )
  )

(defn recur [mv]
  (new-sm (fn [s]
            (let [v-ss (mv s)]
              (cond
               (= nothing v-ss) nothing
               (let [[v ss] v-ss
                     x (recur-fn (.invoke-fn mv) (list v) ss)]
                 (cond
                  (= nothing x) x
                  (cons (reverse (car x)) (cdr x))))))))
  ;; (new-sm (fn [s]
  ;;           (match (mv s)
  ;;                  |List v ss|
  ;;                  (match (recur-fn (.invoke-fn mv) (list v) ss)
  ;;                         |List x & xs| (cons (reverse x) xs)
  ;;                         )
  ;;                  )))
  )
