
(add-ns sm (module "core/state-maybe.toc"))
(add-ns fr (module "core/free.toc"))
(add-ns parser (module "core/parser.toc"))

(deftype do-debug [tag]
  Parser
  (parser/recursive-descent [_]
    (for [text (parser/read-text)]
      (print-err tag (subs text 0 10)))))

(defn debug [tag]
  (parser/ignore
   (parser/rule "debug"
                (fr/free (do-debug tag)))))

(defn to-string [rule]
  (apply-to (fn [chars]
              (apply str chars))
            rule))

(defn symbol-start []
  (parser/rule "symbol-start"
               (comp (parser/alpha) (parser/one-of "._<>=+-*/"))))

(defn symbol-punct []
  (parser/rule "symbol-punct"
               (parser/one-of "._<>=*/+!-?")))

(defn symbol-char []
  (parser/rule "symbol-char"
               (comp (parser/alpha) (parser/digit) (symbol-punct))))

(defn rest-of-symbol []
  (parser/rule "rest-of-symbol"
               (parser/none-or-more (symbol-char))))

(defn read-symbol []
  (parser/rule "symbol"
               (apply-to (fn [start the-rest]
                           (symbol (apply str (cons start the-rest))))
                         (symbol-start)
                         (rest-of-symbol))))

(defn read-keyword []
  (parser/rule "keyword"
               (apply-to (fn [start the-rest]
                           (keyword (apply str (cons start the-rest))))
                         (parser/ignore (parser/term ":"))
                         (symbol-start)
                         (rest-of-symbol))))

(defn backslash []
  (parser/term (char 92)))

(defn read-string-newline []
  (parser/rule "newline"
               (parser/all (parser/ignore (backslash))
                           (parser/ignore (parser/term "n"))
                           (parser/always (char 10)))))

(defn read-string-tab []
  (parser/rule "tab"
               (parser/all (parser/ignore (backslash))
                           (parser/ignore (parser/term "t"))
                           (parser/always (char 9)))))

(defn read-string-backspace []
  (parser/rule "backspace"
               (parser/all (parser/ignore (backslash))
                           (parser/ignore (parser/term "b"))
                           (parser/always (char 8)))))

(defn read-string-return []
  (parser/rule "return"
               (parser/all (parser/ignore (backslash))
                           (parser/ignore (parser/term "r"))
                           (parser/always (char 13)))))

(defn read-string-formfeed []
  (parser/rule "formfeed"
               (parser/all (parser/ignore (backslash))
                           (parser/ignore (parser/term "f"))
                           (parser/always (char 12)))))

(defn read-string-doublequote []
  (parser/rule "doublequote"
               (parser/all (parser/ignore (backslash))
                           (parser/ignore (parser/term (char 34)))
                           (parser/always (char 34)))))

(defn read-string-backslash []
  (parser/rule "backslash"
               (parser/all (parser/ignore (backslash))
                           (parser/ignore (backslash))
                           (parser/always (char 92)))))

(deftype parse-not-backslash []
  Parser
  (parser/recursive-descent [_]
    (parser/char-test (fn [c]
                        (match (comp (m= c (char 92))
                                     (m= c (char 34)))
                               nothing (maybe c)
                               nothing)))))

(defn not-backslash []
  (parser/rule "not-backslash"
               (fr/free (parse-not-backslash))))

(defn read-const-string []
  (parser/rule "string"
               (parser/all (parser/ignore (parser/term (char 34)))
                           (to-string
                            (parser/none-or-more
                             (comp (not-backslash)
                                   (read-string-backslash)
                                   (read-string-doublequote)
                                   (read-string-tab)
                                   (read-string-backspace)
                                   (read-string-return)
                                   (read-string-formfeed)
                                   (read-string-newline))))
                           (parser/ignore (parser/term (char 34))))))

(defn str-to-int [int-str]
  (let [code-0 (char-code "0")]
    (reduce int-str 0
            (fn [n c]
              (+ (* n 10) (- (char-code c) code-0))))))

;; only reads integers
(defn read-number []
  (parser/rule "number"
               (comp
                (apply-to str-to-int
                          (parser/one-or-more (parser/digit)))
                (apply-to (fn [digits]
                            (* -1 (str-to-int digits)))
                          (parser/ignore (parser/term "-"))
                          (parser/one-or-more (parser/digit))))))

(deftype parse-sub-form []
  Parser
  (parser/recursive-descent [_]
    (for [parser-fn (sm/get-in-val (list :parser-fns "form"))
          result (sm/new-sm parser-fn)]
      result)))

(defn read-sub-form []
  (parser/rule "form"
               (fr/free (parse-sub-form))))

(defn read-quoted []
  (parser/rule "quoted"
               (apply-to (fn [arg]
                           (list 'quote arg))
                         (parser/ignore (parser/term "'"))
                         (read-sub-form))))

(defn read-list []
  (parser/rule "list"
               (parser/all (parser/ignore (parser/term "("))
                           (parser/none-or-more (read-sub-form))
                           (parser/ignore (parser/term ")")))))

(defn read-hash-map []
  (parser/rule "hash-map"
               (apply-to (partial cons 'hash-map)
                         (parser/ignore (parser/term "{"))
                         (parser/none-or-more (read-sub-form))
                         (parser/ignore (parser/term "}")))))

(defn read-vector []
  (parser/rule "vector"
               (apply-to (partial cons 'vector)
                         (parser/ignore (parser/term "["))
                         (parser/none-or-more (read-sub-form))
                         (parser/ignore (parser/term "]")))))

(deftype parse-not-eol []
  Parser
  (parser/recursive-descent [_]
    (parser/char-test (fn [c]
                        (match (m= c (char 10))
                               nothing (maybe c)
                               nothing)))))

(defn not-eol []
  (parser/rule "not-eol"
               (fr/free (parse-not-eol))))

(defn read-comment []
  (parser/rule "comment"
               (parser/all (parser/term ";")
                           (parser/ignore (parser/none-or-more (not-eol)))
                           (parser/term (char 10)))))

(defn whitespace []
  (parser/rule "whitespace"
               (comp (parser/one-of " ,")
                     (parser/term (char 9))
                     (parser/term (char 13))
                     (parser/term (char 10))
                     (read-comment))))

(deftype parse-destructure []
  Parser
  (parser/recursive-descent [_]
    (for [parser-fn (sm/get-in-val (list :parser-fns "destructure"))
          result (sm/new-sm parser-fn)]
      result)))

(defn read-sub-dest []
  (parser/rule "destructure"
               (fr/free (parse-destructure))))

(defn read-arg []
  (parser/rule "arg"
               (parser/all (parser/ignore (parser/none-or-more (whitespace)))
                           (read-symbol)
                           (parser/ignore (parser/none-or-more (whitespace))))))

(defn read-var-arg []
  (parser/rule "var-arg"
               (apply-to list
                         (parser/ignore (parser/none-or-more (whitespace)))
                         (parser/term "&")
                         (read-arg))))

(defn read-list-destructure []
  (parser/rule "list-destructure"
               (apply-to (fn [args tail]
                           (comp args (remove tail (partial = "&"))))
                         (parser/ignore (parser/none-or-more (whitespace)))
                         (parser/ignore (parser/term "["))
                         (parser/none-or-more (read-sub-dest))
                         (comp (read-var-arg)
                               (parser/always (list :no-tail)))
                         (parser/ignore (parser/term "]")))))

(defn read-destructure []
  (parser/recursive-rule "destructure"
                         (comp
                          (read-list-destructure)
                          (read-arg))))

(defn read-args []
  (parser/rule "args"
               (apply-to comp
                         (parser/ignore (parser/none-or-more (whitespace)))
                         (parser/ignore (parser/term "["))
                         (parser/none-or-more (read-destructure))
                         (comp (read-var-arg)
                               (parser/always empty-list))
                         (parser/ignore (parser/term "]")))))

(defn read-main []
  (parser/rule "main"
               (apply-to (partial list* 'main)
                         (parser/ignore (parser/term "("))
                         (parser/ignore (parser/none-or-more (whitespace)))
                         (parser/ignore (parser/term "main"))
                         (parser/ignore (parser/one-or-more (whitespace)))
                         (read-args)
                         (parser/one-or-more (read-sub-form))
                         (parser/ignore (parser/none-or-more (whitespace)))
                         (parser/ignore (parser/term ")")))))

(defn read-single-arity []
  (parser/rule "single-arity"
               (apply-to (fn [& vs]
                           (list (cons 'fn-arity vs)))
                         (read-args)
                         (parser/none-or-more (read-sub-form)))))

(defn read-multi-arity []
  (parser/rule "multi-arity"
               (apply-to (partial list 'fn-arity)
                         (parser/ignore (parser/none-or-more (whitespace)))
                         (parser/ignore (parser/term "("))
                         (parser/ignore (parser/none-or-more (whitespace)))
                         (read-args)
                         (parser/none-or-more (read-sub-form))
                         (parser/ignore (parser/none-or-more (whitespace)))
                         (parser/ignore (parser/term ")")))))

(defn read-arities []
  (parser/rule "arities"
               (comp (read-single-arity)
                     (parser/one-or-more (read-multi-arity)))))

(defn read-defn []
  (parser/rule "defn"
               (apply-to (fn [name arities]
                           (list 'def name (list 'fn name arities)))
                         (parser/ignore (parser/term "("))
                         (parser/ignore (parser/none-or-more (whitespace)))
                         (parser/ignore (parser/term "defn"))
                         (parser/ignore (parser/one-or-more (whitespace)))
                         (read-symbol)
                         (parser/ignore (parser/one-or-more (whitespace)))
                         (read-arities)
                         (parser/ignore (parser/none-or-more (whitespace)))
                         (parser/ignore (parser/term ")")))))

(defn read-fn []
  (parser/rule "fn"
               (apply-to (partial list 'fn)
                         (parser/ignore (parser/term "("))
                         (parser/ignore (parser/none-or-more (whitespace)))
                         (parser/ignore (parser/term "fn"))
                         (parser/ignore (parser/one-or-more (whitespace)))
                         (comp (read-symbol)
                               (parser/always 'anon))
                         (parser/ignore (parser/none-or-more (whitespace)))
                         (read-arities)
                         (parser/ignore (parser/none-or-more (whitespace)))
                         (parser/ignore (parser/term ")")))))

(defn read-fields []
  (parser/rule "type-fields"
               (apply-to (partial list* 'vector)
                         (parser/ignore (parser/term "["))
                         (parser/none-or-more (read-symbol))
                         (parser/ignore (parser/term "]")))))

;; (defn read-restricted-symbol []
;;   (parser/rule "type-name"
;;                (apply-to (fn [chars]
;;                            (symbol (apply str chars)))
;;                          (parser/one-or-more (parser/alpha)))))

;; (defn read-deftype []
;;   (parser/rule "deftype"
;;                (apply-to (partial list* 'deftype)
;;                          (parser/ignore (parser/term "("))
;;                          (parser/ignore (parser/none-or-more (whitespace)))
;;                          (parser/ignore (parser/term "deftype"))
;;                          (parser/ignore (parser/one-or-more (whitespace)))
;;                          (read-restricted-symbol)
;;                          (parser/ignore (parser/one-or-more (whitespace)))
;;                          (read-fields)
;;                          (parser/none-or-more (read-sub-form))
;;                          (parser/ignore (parser/term ")")))))

(defn read-let-binding []
  (parser/rule "let-binding"
               (apply-to list
                         (parser/ignore (parser/none-or-more (whitespace)))
                         (read-destructure)
                         (parser/ignore (parser/none-or-more (whitespace)))
                         (read-sub-form))))

(defn read-let []
  (parser/rule "let"
               (apply-to (partial list* 'let)
                         (parser/ignore (parser/term "("))
                         (parser/ignore (parser/none-or-more (whitespace)))
                         (parser/ignore (parser/term "let"))
                         (parser/ignore (parser/one-or-more (whitespace)))
                         (parser/ignore (parser/term "["))
                         (parser/none-or-more (read-let-binding))
                         (parser/ignore (parser/term "]"))
                         (parser/one-or-more (read-sub-form))
                         (parser/ignore (parser/none-or-more (whitespace)))
                         (parser/ignore (parser/term ")")))))

(defn read-for-let []
  (parser/rule "for-let"
               (apply-to (partial list :let)
                         (parser/ignore (parser/none-or-more (whitespace)))
                         (parser/ignore (parser/term ":let"))
                         (parser/ignore (parser/one-or-more (whitespace)))
                         (parser/ignore (parser/term "["))
                         (parser/none-or-more (read-let-binding))
                         (parser/ignore (parser/term "]")))))

(defn read-for-when []
  (parser/rule "for-when"
               (apply-to (partial list :when)
                         (parser/ignore (parser/none-or-more (whitespace)))
                         (parser/ignore (parser/term ":when"))
                         (parser/ignore (parser/one-or-more (whitespace)))
                         (read-sub-form))))

(defn read-for-binding []
  (parser/rule "for-binding"
               (comp (read-for-let)
                     (read-for-when)
                     (read-let-binding))))

(defn read-for []
  (parser/rule "for"
               (apply-to (fn [bound val bindings body]
                           (let [wrap-sym (gensym "wrapper_")
                                 bindings (cons (list bound wrap-sym) bindings)]
                             (list 'let (list (list wrap-sym val))
                                   (reduce (reverse bindings) (list 'wrap wrap-sym body)
                                           (fn [expr for-clause]
                                             (match for-clause
                                                    |List :let val| (list 'let val expr)
                                                    |List :when val| (list 'cond (list 'instance? 'maybe val)
                                                                             expr (list 'zero wrap-sym))
                                                    (list 'flat-map (second for-clause)
                                                          (list 'fn 'anon
                                                                (list (list 'fn-arity
                                                                            (list (first for-clause))
                                                                            (list expr)))))))))))
                         (parser/ignore (parser/term "("))
                         (parser/ignore (parser/none-or-more (whitespace)))
                         (parser/ignore (parser/term "for"))
                         (parser/ignore (parser/one-or-more (whitespace)))
                         (parser/ignore (parser/term "["))
                         (read-destructure)
                         (read-sub-form)
                         (parser/none-or-more (read-for-binding))
                         (parser/ignore (parser/term "]"))
                         (read-sub-form)
                         (parser/ignore (parser/none-or-more (whitespace)))
                         (parser/ignore (parser/term ")")))))

(defn read-apply []
  (parser/rule "apply"
               (apply-to (fn [f args]
                           (list 'apply* f (cons 'list args)))
                         (parser/ignore (parser/term "("))
                         (parser/ignore (parser/none-or-more (whitespace)))
                         (parser/ignore (parser/term "apply"))
                         (parser/ignore (parser/one-or-more (whitespace)))
                         (read-sub-form)
                         (parser/one-or-more (read-sub-form))
                         (parser/ignore (parser/none-or-more (whitespace)))
                         (parser/ignore (parser/term ")")))))

(defn read-apply-to []
  (parser/rule "apply-to"
               (apply-to (fn [f arg args]
                           (let [wrap-sym (gensym "wrapper_")
                                 msg (str (list 'apply-to f arg args))
                                 r (list 'let (list (list wrap-sym arg))
                                         (list 'print-err msg)
                                         (list
                                          (list 'apply* (list 'wrap wrap-sym f)
                                                (cons 'list (cons wrap-sym args)))))]
                             (list 'let (list (list wrap-sym arg))
                                   (list 'apply* (list 'wrap wrap-sym f)
                                         (cons 'list (cons wrap-sym args))))))
                         (parser/ignore (parser/term "("))
                         (parser/ignore (parser/none-or-more (whitespace)))
                         (parser/ignore (parser/term "apply-to"))
                         (parser/ignore (parser/one-or-more (whitespace)))
                         (read-sub-form)
                         (read-sub-form)
                         (parser/none-or-more (read-sub-form))
                         (parser/ignore (parser/none-or-more (whitespace)))
                         (parser/ignore (parser/term ")")))))

(defn read-comp []
  (parser/rule "comp"
               (apply-to (fn [arg args]
                           (list 'comp* arg (cons 'list args)))
                         (parser/ignore (parser/term "("))
                         (parser/ignore (parser/none-or-more (whitespace)))
                         (parser/ignore (parser/term "comp"))
                         (parser/ignore (parser/one-or-more (whitespace)))
                         (read-sub-form)
                         (parser/none-or-more (read-sub-form))
                         (parser/ignore (parser/none-or-more (whitespace)))
                         (parser/ignore (parser/term ")")))))

(defn read-pattern []
  (parser/rule "match-pattern"
               (apply-to (fn [pattern-type args-head args-tail]
                           (comp (cons pattern-type args-head)
                                 args-tail))
                         (parser/ignore (parser/term "|"))
                         (parser/ignore (parser/none-or-more (whitespace)))
                         (read-symbol)
                         (parser/ignore (parser/none-or-more (whitespace)))
                         (parser/none-or-more (parser/all
                                               (comp (read-symbol)
                                                     (read-keyword)
                                                     (read-const-string)
                                                     (read-number)
                                                     (read-quoted))
                                               (parser/ignore (parser/none-or-more (whitespace)))))
                         (comp (read-var-arg)
                               (parser/always empty-list))
                         (parser/ignore (parser/term "|")))))

(deftype Nope []
  Parser
  (parser/recursive-descent [_]
    (for [file-name (sm/get-val :file-name)]
      (let [_ (print-err :file-with-match file-name)]
        (abort)))))

(defn stupid []
  (parser/ignore
   (parser/rule "nope"
                (fr/free (Nope)))))

(defn read-match []
  (parser/rule "match"
               (apply-to (partial list 'match)
                         (parser/ignore (parser/term "("))
                         (parser/ignore (parser/none-or-more (whitespace)))
                         (parser/ignore (parser/term "match"))
                         (parser/ignore (parser/one-or-more (whitespace)))
                         (read-sub-form)
                         (parser/one-or-more (apply-to list
                                                       (comp
                                                        (read-pattern)
                                                        (read-const-string)
                                                        (read-symbol)
                                                        (read-keyword)
                                                        (read-quoted)
                                                        (read-number))
                                                       (read-sub-form)))
                         (comp (read-sub-form)
                               (stupid))
                         (parser/ignore (parser/term ")")))))

(defn read-form []
  (parser/recursive-rule "form"
       (parser/all (parser/ignore (parser/none-or-more (whitespace)))
             (comp (read-number)
                   (read-match)
                   (read-keyword)
                   (read-symbol)
                   (read-quoted)
                   (read-const-string)
                   (read-let)
                   (read-main)
                   (read-defn)
                   (read-fn)
                   (read-for)
                   (read-comp)
                   (read-apply)
                   (read-apply-to)
                   (read-hash-map)
                   (read-vector)
                   (read-list))
             (parser/ignore (parser/none-or-more (whitespace))))))

