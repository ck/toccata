
(add-ns ast (module "core/ast.toc"))
(add-ns sm (module "core/state-maybe.toc"))
;; (add-ns fio (module "core/file-io.toc"))

(defn set-expr [expr]
  (sm/set-val :expr expr))

(defn is-expr [pred]
  (for [expr (sm/get-val :expr)
        :when (pred expr)]
    expr))

(def analyze-expr)

(defn analyze-inline-text []
  (flat-map (sm/get-val :expr)
            (fn [expr]
              (sm/when (match expr
                              |List 'inline-text type text|
                              (maybe (ast/inline-text text type))

                              |List 'inline-text text|
                              (maybe (ast/inline-text text :no-type)))))))

(defn analyze-symbol []
  (for [sym (is-expr (partial instance? Symbol))]
    (ast/sym sym)))

(defn analyze-keyword []
  (for [kw (is-expr (partial instance? Keyword))]
    (ast/kw kw)))

(defn make-static-number [num]
  (for [num-idx (sm/get-val :num-count)
        _ (sm/set-val :num-count (inc num-idx))
        _ (sm/assoc-in-val (list :new-numbers num)
                           (str "_num_" num-idx))]
    ""))

(defn analyze-number []
  (for [num (is-expr (partial instance? Number))]
    (ast/number num)))

(defn analyze-string []
  (for [str-val (is-expr string?)]
    (ast/strng str-val)))

(defn analyze-call []
  (for [expr (sm/get-val :expr)
        [target & args] (sm/traverse expr analyze-expr)]
    (ast/call-expr target args)))

(defn analyze-let-binding [binding-pair]
  (for [_ (sm/when (= 2 (count binding-pair)))
        :let [[binding expr] binding-pair]
        curr-expr (sm/get-val :expr)
        ast (analyze-expr expr)
        _ (sm/set-val :expr curr-expr)]
    (ast/binding binding ast)))

(defn analyze-let []
  (for [expr (sm/get-val :expr)
        [bindings exprs] (sm/when (match expr
                                         |List 'let bindings & exprs|
                                         (maybe (list bindings exprs))))
        bindings (sm/traverse bindings analyze-let-binding)
        body (sm/traverse exprs analyze-expr)]
    (ast/let-expr bindings body)))

(defn analyze-fn-arity []
  (for [expr (sm/get-val :expr)
        [args exprs] (sm/when (match expr
                                     |List 'fn-arity args exprs|
                                     (maybe (list args exprs))))
       body (sm/traverse exprs analyze-expr)]
    (match (some args (partial = "&"))
           nothing (ast/fixed-arity args body)
           (ast/variadic-arity (remove args (partial = "&")) body))))

;; TODO: let anonymous function closures reference themselves by name
(defn analyze-fn []
  (for [expr (sm/get-val :expr)
        [_ name arities] (sm/when (match expr
                                         |List 'fn _ _|
                                         (maybe expr)))
        arities (sm/traverse arities analyze-expr)]
    (ast/fn-expr (ast/sym name) arities)))

(defn analyze-proto-arity [[fn-name params & default-body]]
  (flat-map (sm/when-not (some params (partial = "&")))
            (fn [_]
              (comp (for [_ (sm/when (list-empty? default-body))]
                      {fn-name {(dec (count params)) {}}})
                    (for [ast (analyze-expr (list 'fn-arity (rest params) default-body))]
                      {fn-name {(dec (count params)) {:default ast}}})))))

(defn analyze-protocol []
  (for [expr (sm/get-val :expr)
        [name defs] (sm/when (match expr
                                    |List 'defprotocol name & defs|
                                    (maybe (list name defs))))
        proto-fns (sm/traverse defs analyze-proto-arity)]
    (ast/proto name (apply merge-with comp proto-fns))))

(defn make-quoted [quoted-form]
  (match quoted-form
         |Symbol|
         (sm/state-maybe (ast/quoted quoted-form))

         |String|
         (analyze-expr quoted-form)

         |Keyword|
         (analyze-expr quoted-form)

         |Number|
         (analyze-expr quoted-form)

         |List 'quote|
         (make-quoted (car (cdr quoted-form)))

         |List 'hash-map|
         (for [contents (sm/traverse (cdr quoted-form) make-quoted)]
           (ast/call-expr (ast/sym 'hash-map) contents))

         |List 'vector|
         (for [contents (sm/traverse (cdr quoted-form) make-quoted)]
           (ast/call-expr (ast/sym 'vector) contents))

         |List|
         (for [qs (sm/traverse quoted-form make-quoted)]
           (ast/call-expr (ast/sym 'list) qs))

         (sm/state-maybe "")))

(defn analyze-quoted []
  (for [expr (sm/get-val :expr)
        to-be-quoted (sm/when (match expr
                                     |List 'quote quoted|
                                     (maybe quoted)))
        quoted (make-quoted to-be-quoted)]
    quoted))

(defn analyze-def []
  (flat-map (sm/get-val :expr)
            (fn [expr]
              (match expr
                     |List 'def name value|
                     (for [val-ast (analyze-expr value)]
                       (ast/def-expr name val-ast))

                     |List 'def name|
                     (sm/state-maybe (ast/declare name))

                     (zero sm/state-maybe)))))

(defn analyze-cond []
  (for [expr (sm/get-val :expr)
        clause-pairs (sm/when (match expr
                                     |List 'cond & clause-pairs|
                                     (maybe clause-pairs)))
        clause-pairs (sm/traverse clause-pairs analyze-expr)]
    (let [clauses (partition-all clause-pairs 2)]
      (match (last clauses empty-list)
             |List default| (ast/cond-expr (butlast clauses) default)
             (let [_ (print-err "'cond' must have a default clause")]
               (abort))))))

(defn analyze-match []
  (for [expr (sm/get-val :expr)
        [value clauses default] (sm/when (match expr
                                                |List 'match value clauses default|
                                                (maybe (list value clauses default))))
        value (analyze-expr value)
        clauses (sm/traverse clauses
                             (fn [[pattern result]]
                               (for [_ (analyze-expr pattern)
                                     result (analyze-expr result)]
                                 (list pattern result))))
        default (analyze-expr default)]
    (ast/match-expr value clauses default)))

(defn analyze-proto-fn []
  (for [expr (sm/get-val :expr)
        [name args exprs frms] (sm/when (match expr
                                               |List frm & frms|
                                               (match frm
                                                      |List name args & exprs|
                                                      (maybe (list name args exprs frms)))))
       body (sm/traverse exprs analyze-expr)
        _ (sm/set-val :expr frms)]
    {name (list (ast/fixed-arity (rest args) body))}))

(defn analyze-proto-impl []
  (for [expr (sm/get-val :expr)
        [name frms] (sm/when (match expr
                                    |List name & frms|
                                    (maybe (list name frms))))
        :when (instance? Symbol name)
        _ (sm/set-val :expr frms)
        fn-impls (sm/recur (analyze-proto-fn))]
    {name (apply merge-with comp fn-impls)}))

(defn analyze-extensions [exts]
  (for [curr-expr (sm/get-val :expr)
        _ (sm/set-val :expr exts)
        proto-impls (sm/recur (analyze-proto-impl))
        _ (sm/set-val :expr curr-expr)]
    (apply merge-with comp proto-impls)))

(defn analyze-extend-type []
  (for [expr (sm/get-val :expr)
        [name defs] (sm/when (match expr
                                    |List 'extend-type name & defs|
                                    (maybe (list name defs))))
        proto-specs (analyze-extensions defs)]
    (ast/type-extension name proto-specs)))

(defn analyze-reify []
  (for [expr (sm/get-val :expr)
        defs (sm/when (match expr
                             |List 'reify & defs|
                             (maybe defs)))
        proto-specs (analyze-extensions defs)]
    (ast/reified proto-specs)))

(defn analyze-deftype []
  (flat-map (sm/get-val :expr)
            (fn [expr]
              (sm/when (match expr
                              |List 'deftype name fields & defs|
                              (maybe (ast/type-expr name fields defs)))))))

(defn analyze-add-ns []
  (for [expr (sm/get-val :expr)
        [ns-name defs] (sm/when (match expr
                                       |List 'add-ns ns-name defs|
                                       (maybe (list ns-name defs))))
        asts (analyze-expr defs)]
    (ast/ns-add ns-name asts)))

(defn analyze-module []
  (for [expr (sm/get-val :expr)
        module-name (sm/when (match expr
                                    |List 'module module-name|
                                    (maybe module-name)))
        module-ast (comp
                    (for [_ (sm/get-in-val (list :modules module-name))]
                      (list (ast/strng module-name)))
                    (for [text (sm/get-val :text)
                          _ (sm/set-val :text (slurp module-name))
                          file-name (sm/get-val :file-name)
                          _ (sm/set-val :file-name module-name)
                          parser (sm/get-val :parser)
                          asts (sm/recur (for [expr parser
                                               ast (analyze-expr expr)]
                                           ast))
                          ;; :let [_ (fio/close-stream module-stream)]
                          _ (sm/set-val :file-name file-name)
                          _ (sm/set-val :text text)]
                      (cons (ast/strng module-name)
                            asts)))]
    module-ast))

(defn analyze-main []
  (for [expr (sm/get-val :expr)
        [args exprs] (sm/when (match expr
                               |List 'main args & exprs|
                               (maybe (list args exprs))))
        body (sm/traverse exprs analyze-expr)]
    (ast/main-fn args body)))

(defn expr-to-ast []
  (comp (analyze-symbol)
        (analyze-keyword)
        (analyze-number)
        (analyze-string)
        (analyze-fn)
        (analyze-deftype)
        (analyze-protocol)
        (analyze-main)
        (analyze-def)
        (analyze-cond)
        (analyze-match)
        (analyze-extend-type)
        (analyze-reify)
        (analyze-module)
        (analyze-add-ns)
        (analyze-inline-text)
        (analyze-fn-arity)
        (analyze-let)
        (analyze-quoted)
        (analyze-call)
        (flat-map (sm/get-val :expr)
                  (fn [e]
                    (print-err "could not analyze" e)
                    empty-list))))

(defn analyze-expr [expr]
  (for [curr-expr (sm/get-val :expr)
        _ (set-expr expr)
        ast (expr-to-ast)
        _ (set-expr curr-expr)]
    ast))

