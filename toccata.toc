
;; TODO:
;; persistent data structures; maps, vectors
;;     Implement HashCollisionNode and re-hashing
;; quoted lists
;; optimize calls to invoke fns
;; automatically derive =* for reified types
;;     and uncomment code in BitmapIndexedNode/assoc*
;; importing modules with no defs blows up

;; gives non-sense error message
;;        (deftype Bogus
;;            extend-type Number
;;            Stringable
;;            (string-list [_] (list "")))

;; compact lists cdr coding
;; implements?
;; fn meta data; doc strings and ast
;; pattern matching
;; REPL
;; macro system
;; green threads
;; async
;; dependencies
;; supercompilation
;; FFI
;; free Opaque pointer types when they're decRef'd
;; Android/iOS
;; native arrays
;; linear algebra

(toccata-core "core.toc")

(add-ns sm (module "core/state-maybe.toc"))
(add-ns fr (module "core/free.toc"))
(add-ns parser (module "core/parser.toc"))
(add-ns grmr (module "core/grammar.toc"))
(add-ns ast (module "core/ast.toc"))
(add-ns an (module "core/analyzer.toc"))
(add-ns fio (module "core/file-io.toc"))

(defn debug [& args]
  (comp (for [debugging (sm/get-val :debug-on false)
              :when debugging]
          (apply print-err args))
        (sm/state-maybe "")))

(defn types []
  ;; type numbers must start at 1 and be contiguous
  {'String 1
   'Number 2
   'Function 3
   'List 4
   'Keyword 5
   'SubStr 6
   'Symbol 7
   'FnArity 8
   'Opaque 9
   'BitmapIndexedNode 10
   'ArrayNode 11
   })

(deftype c-code [c-val init decl type-num]
  Stringable
  (string-list [_]
    (list "<C-Code " (str c-val) ">")))

(defn write [str]
  (sm/new-sm (fn [s]
               (list (print str) s))))

(defn write-strs [str-list]
  (cond
   (= 0 (count str-list)) (sm/state-maybe "")
   (sm/new-sm (fn [s]
                (list (map str-list print) s)))))

(defn genlocal [pre]
  (for [sym-count (sm/get-val :local-sym-count 0)
        _ (sm/set-val :local-sym-count (inc sym-count))]
    (symbol (str pre sym-count))))

(defn local-sym [sym]
  (sm/get-in-val (list :local-syms sym)))

(defn closed-over-sym [sym]
  (for [;; fails if 'sym' is not in the context
        sym-val (sm/get-in-val (list :context sym))

        closed-over (sm/get-val :closed-over empty-list)
        :let [closure-sym (reduce closed-over :not-found
                                  (fn [found? c]
                                    (cond
                                     (= sym (second c)) (first c)
                                     found?)))]
        closure-sym (cond
                     (= closure-sym :not-found) (for [closure-sym (genlocal "val")
                                                      _ (sm/update-in-val (list :closed-over)
                                                                          (fn [closures]
                                                                            (cons (list closure-sym sym)
                                                                                  closures)))]
                                                  closure-sym)
                     (sm/state-maybe closure-sym))]
    (c-code closure-sym empty-list "" (.type-num sym-val))))

(defn core-def [sym]
  (for [ext-ref (sm/get-in-val (list :core-defined-syms sym))
        _ (sm/assoc-in-val (list :defined-syms sym) ext-ref)
        _ (sm/update-in-val (list :new-externs)
                            (fn [externs]
                              (cons (first ext-ref) externs)))]
    (second ext-ref)))

;; A symbol can be a local, from the context, from the dictionary or
;; from the core
(defn lookup-sym* [sym]
  (comp (sm/get-in-val (list :local-syms sym))
        (closed-over-sym sym)
        (for [ext-ref (sm/get-in-val (list :defined-syms sym))]
          (second ext-ref))
        (core-def sym)))

(defn lookup-sym [sym]
  (comp (lookup-sym* sym)
        (sm/new-sm (fn [s]
                     (print-err "Undefined symbol:" sym "at" (get s :file-name "") ":" (get s :line-num ""))
                     (abort)))))

(defn reset-fn-context [arity-fn-sym num-args]
  (for [locals (sm/get-val :local-syms {})
        _ (sm/set-val :local-syms {})
        local-sym-count (sm/get-val :local-sym-count 0)
        _ (sm/set-val :local-sym-count 0)
        context (sm/get-val :context {})
        _ (sm/set-val :context (comp context locals))
        closed-over (sm/get-val :closed-over empty-list)
        _ (sm/set-val :closed-over empty-list)
        curr-arity-fn-sym (sm/get-val :curr-arity-fn-sym "")
        _ (sm/set-val :curr-arity-fn-sym arity-fn-sym)
        curr-arg-count (sm/get-val :curr-arg-count 0)
        _ (sm/set-val :curr-arg-count num-args)]
    (list locals local-sym-count context closed-over
          curr-arity-fn-sym curr-arg-count)))

(defn restore-fn-context [fn-context]
  (let [locals (nth fn-context 0 {})
        local-sym-count (nth fn-context 1 0)
        context (nth fn-context 2 {})
        closed-over (nth fn-context 3 empty-list)
        curr-arity-fn-sym (nth fn-context 4 empty-list)
        curr-arg-count (nth fn-context 5 empty-list)]
    (apply-to list
              (sm/set-val :context context)
              (sm/set-val :local-syms locals)
              (sm/set-val :local-sym-count local-sym-count)
              (sm/set-val :closed-over closed-over)
              (sm/set-val :curr-arity-fn-sym curr-arity-fn-sym)
              (sm/set-val :curr-arg-count curr-arg-count))))

(defn begin-scope []
  (for [scope-locals (sm/get-val :scope-locals {})
        _ (sm/set-val :scope-locals {})]
    scope-locals))

(defn end-scope [scope-info]
  (sm/set-val :scope-locals scope-info))

(defn remember-local [sym]
  (sm/assoc-in-val (list :scope-locals (str sym)) true))

(defn emit-closures []
  (for [closures (sm/get-val :closed-over empty-list)
        _ (cond
           (empty? closures) (sm/state-maybe "")
           (traverse (reverse closures)
                     (fn [closure]
                       (for [_ (write-strs (list
                                            "Value *" (first closure)
                                            " = closures->head;\n"
                                            "if (closures->tail)\nclosures->tail->len = closures->len - 1;\n"
                                            "closures = closures->tail;\n"))]
                         ""))))]
    ""))

(defn static-arity [arity-fn-sym arg-syms variadic return-type]
  (let [fn-arity-type (get (types) 'FnArity :no-fn-type)]
    (sm/state-maybe (c-code (str "&(FnArity){" fn-arity-type ", -1, "
                                 (count arg-syms) ", (List *)0, " variadic ", " arity-fn-sym "}")
                            empty-list
                            (cond
                             variadic {:variadic {:fn-sym arity-fn-sym
                                                  :return-type return-type}}
                             {(count arg-syms) {:fn-sym arity-fn-sym
                                                :return-type return-type}})
                            fn-arity-type))))

(defn arity-closes-over [arity-sym arity-fn-sym arg-syms closures variadic return-type]
  (for [closed-over (traverse closures
                              (fn [closure]
                                (for [c-sym (lookup-sym (nth closure 1 ""))]
                                  (str "incRef((Value *)" (.c-val c-sym) ");\n"
                                       arity-sym "->closures = listCons((Value *)"
                                       (.c-val c-sym)
                                       ", (List *)" arity-sym "->closures);\n"))))]
    (let [fn-arity-type (get (types) 'FnArity :no-fn-type)]
      (c-code arity-sym
              (list* (str "FnArity *" arity-sym " = malloc_fnArity();\n")
                     (str arity-sym "->type = " fn-arity-type ";\n")
                     (str arity-sym "->count = " (count arg-syms) ";\n")
                     (str arity-sym "->closures = empty_list;\n")
                     (str arity-sym "->variadic = " variadic ";\n")
                     (str arity-sym "->fn = " arity-fn-sym ";\n")
                     closed-over)
              {(count arg-syms) {:return-type return-type}}
              fn-arity-type))))

(defn emit-externs []
  (for [externs (sm/get-val :new-externs empty-list)
        _ (write-strs (map externs (fn [ext] (str "extern " ext ";\n"))))
        _ (sm/set-val :new-externs empty-list)

        static-fns (sm/get-val :new-static-fns empty-list)
        _ (write-strs static-fns)
        _ (sm/set-val :new-static-fns empty-list)]
    ""))

(defn core-static-fn [target-sym num-args]
  (let [args (cons "List *" (cond
                             (= 0 num-args) empty-list
                             (= :variadic num-args) (list "Value *")
                             (repeat num-args "Value *")))
        args (apply str (interpose args ", "))]
    (for [arity-sym (sm/get-in-val (list :core-static-fns target-sym num-args :fn-sym))
          _ (sm/update-in-val (list :new-static-fns)
                              (fn [s-fns]
                                (cons (str "Value *" arity-sym "(" args ");\n") s-fns)))]
      arity-sym)))

(defn lookup-static-fn [target-sym num-args]
  (comp (sm/get-in-val (list :static-fns target-sym num-args :fn-sym))
        (core-static-fn target-sym num-args)))

(defn lookup-static-return-type [target-sym num-args]
  (comp (sm/get-in-val (list :static-fns target-sym num-args :return-type))
        (sm/get-in-val (list :core-static-fns target-sym num-args :return-type) :no-type)))

(defn call-dyn-fn-value [target args]
  (cond
   (not (= (get (types) 'Function :type-not-found) (.type-num target)))
   (sm/new-sm (fn [s] empty-list))

   (let [arg-stmts (second args)
         num-args (count (first args))]
     (for [arity-sym (genlocal "arity")
           variadic-sym (genlocal "varArgs")
           fn-sym (genlocal "fn")
           result-sym (genlocal "rslt")
           _ (remember-local result-sym)]
       (let [args (map (first args) .c-val)
             arg-syms (cons (str arity-sym "->closures") args)]
         (c-code result-sym
                 (comp (.init target)
                       arg-stmts
                       (list "Value *" result-sym ";\n"
                             "FnArity *" arity-sym " = findFnArity(" (.c-val target) ", " num-args ");\n"
                             "if(" arity-sym " != (FnArity *)0 && !" arity-sym "->variadic) {\n"
                             "FnType" num-args " *" fn-sym " = (FnType" num-args " *)" arity-sym "->fn;\n"
                             result-sym " = " fn-sym "(" (apply str (interpose arg-syms ", ")) ");\n"
                             "} else if(" arity-sym " != (FnArity *)0 && " arity-sym "->variadic) {\n"
                             "FnType1 *" fn-sym " = (FnType1 *)" arity-sym "->fn;\n"
                             "List *" variadic-sym " = empty_list;\n")
                       (map (reverse (rest arg-syms))
                            (fn [arg-sym]
                              (str "incRef(" arg-sym ");\n"
                                   variadic-sym " = (List *)listCons("
                                   arg-sym ", " variadic-sym ");\n")))
                       (list result-sym " = " fn-sym "(" (first arg-syms) ", (Value *)" variadic-sym ");\n"
                             "decRef((Value *)" variadic-sym ");\n"
                             "my_free((Value *)" variadic-sym ");\n"
                             "} else {\nfprintf(stderr, \"\\n*** no arity found for '%s'.\\n\", "
                             "((Function *)" (.c-val target) ")->name"
                             ");\n  abort();\n}\n"))
                 "" :no-type))))))

(defn call-dyn-unknown-type [target args]
  (cond
   (not (= :no-type (.type-num target)))
   (sm/new-sm (fn [s] empty-list))

   (let [arg-stmts (second args)
         num-args (count (first args))]
     (for [arity-sym (genlocal "arity")
           variadic-sym (genlocal "varArgs")
           fn-sym (genlocal "fn")
           result-sym (genlocal "rslt")
           _ (remember-local result-sym)
           invoke-sym (lookup-sym 'invoke)
           invoke-arity-sym (lookup-static-fn (.c-val invoke-sym) (inc num-args))]
       (let [args (map (first args) .c-val)
             arg-syms (cons (str arity-sym "->closures") args)]
         (c-code result-sym
                 (comp (.init target)
                       arg-stmts
                       (list "Value *" result-sym ";\n"
                             "if((" (.c-val target) ")->type != FunctionType) {\n"

                             result-sym " = " invoke-arity-sym "(empty_list, "
                             (apply str (interpose (cons (.c-val target) args) ", "))
                             ");\n} else {\n"

                             "FnArity *" arity-sym " = findFnArity(" (.c-val target) ", " num-args ");\n"
                             "if(" arity-sym " != (FnArity *)0 && !" arity-sym "->variadic) {\n"
                             "FnType" num-args " *" fn-sym " = (FnType" num-args " *)" arity-sym "->fn;\n"
                             result-sym " = " fn-sym "(" (apply str (interpose arg-syms ", ")) ");\n"
                             "} else if(" arity-sym " != (FnArity *)0 && " arity-sym "->variadic) {\n"
                             "FnType1 *" fn-sym " = (FnType1 *)" arity-sym "->fn;\n"
                             "List *" variadic-sym " = empty_list;\n")
                       (map (reverse (rest arg-syms))
                            (fn [arg-sym]
                              (str "incRef(" arg-sym ");\n"
                                   variadic-sym " = (List *)listCons("
                                   arg-sym ", " variadic-sym ");\n")))
                       (list result-sym " = " fn-sym "(" (first arg-syms) ", (Value *)" variadic-sym ");\n"
                             "decRef((Value *)" variadic-sym ");\n"
                             "my_free((Value *)" variadic-sym ");\n"
                             "} else {\nfprintf(stderr, \"\\n*** no arity found for '%s'.\\n\", "
                             "((Function *)" (.c-val target) ")->name"
                             ");\n  abort();\n}\n}\n"))
                 "" :no-type))))))

(defn call-dyn-known-type [target args]
  (let [arg-stmts (second args)
        num-args (count (first args))]
    (for [result-sym (genlocal "rslt")
          _ (remember-local result-sym)
          invoke-sym (lookup-sym 'invoke)
          invoke-arity-sym (lookup-static-fn (.c-val invoke-sym) (inc num-args))

          qualified-name (sm/get-in-val (list :defined-protos 'invoke))
          proto-fn (sm/get-in-val (list :protocols qualified-name :impls
                                        (.type-num target) :fn-sym)
                                  :failed)
          invoke-fn-sym (comp (lookup-static-fn proto-fn (inc num-args))
                              (sm/state-maybe :failed))
          return-type (lookup-static-return-type proto-fn (inc num-args))]
      (let [fn-sym (cond
                    (= :failed invoke-fn-sym) invoke-arity-sym
                    invoke-fn-sym)]
        (c-code result-sym
                (comp (.init target)
                      arg-stmts
                      (list "Value *" result-sym " = " fn-sym "(empty_list, "
                            (apply str (interpose (cons (.c-val target)
                                                        (map (first args) .c-val)) ", "))
                            ");\n"))
                "" return-type)))))

(defn call-recursive [target args]
  (let [arg-stmts (second args)
        args (map (first args) .c-val)]
    (for [curr-fn-sym (sm/get-val :curr-fn-sym)
          curr-num-args (sm/get-val :curr-arg-count -1)
          :when (and (= (str "(Value *)&" curr-fn-sym) (.c-val target))
                     (= (count args) curr-num-args))
          curr-arity-fn-sym (sm/get-val :curr-arity-fn-sym)
          result-sym (genlocal "rslt")
          _ (remember-local result-sym)]
      (c-code result-sym
              (comp (.init target)
                    arg-stmts
                    (list "Value *" result-sym " = " curr-arity-fn-sym
                          "(" (apply str (interpose (cons "closures" args) ", ")) ");\n"))
              "" :no-type))))

(defn call-proto-impl [target-ast args]
  (cond
   (empty? (first args)) (sm/new-sm (fn [s] empty-list))
   (not (instance? fr/free target-ast)) (sm/new-sm (fn [s] empty-list))
   (not (instance? ast/symbol-ast (.v target-ast))) (sm/new-sm (fn [s] empty-list))
   (= :no-type (.type-num (first (first args)))) (sm/new-sm (fn [s] empty-list))
   (let [name (.sym (.v target-ast))
         arg-stmts (second args)
         args (first args)
         num-args (count args)]
     (for [qualified-name (sm/get-in-val (list :defined-protos name))
           proto-fn (sm/get-in-val (list :protocols qualified-name :impls
                                         (.type-num (first args)) :fn-sym)
                                   :failed)
           ;; TODO: remove debugging aid
           :let [ _ (cond
                     (and (not (= :no-type (.type-num (first args))))
                          (= :failed proto-fn))
                     (let [_ (println "// " :missed-opportunity qualified-name (.type-num (first args)))]
                       (print-err :missed-opportunity qualified-name (.type-num (first args))))

                     :bogus)]
           :when (not (= :failed proto-fn))
           fn-sym (lookup-static-fn proto-fn num-args)
           return-type (lookup-static-return-type proto-fn num-args)
           result-sym (genlocal "rslt")
           _ (remember-local result-sym)]
       (let [arg-syms (cons "empty_list" (map args .c-val))]
         (c-code result-sym
                 (comp arg-stmts
                       (list "Value *" result-sym " = " fn-sym "(")
                       (interpose arg-syms ", ")
                       (list ");\n"))
                 ""
                 return-type))))))

(defn call-static-fixed [target args]
  (let [arg-stmts (second args)
        args (map (first args) .c-val)
        num-args (count args)]
    (for [arity-sym (lookup-static-fn (.c-val target) num-args)
          result-type (lookup-static-return-type (.c-val target) num-args)
          result-sym (genlocal "rslt")
          _ (remember-local result-sym)]
      (c-code result-sym
              (comp (.init target)
                    arg-stmts
                    (list (str Value* result-sym " = " arity-sym "("
                               (apply str (interpose (cons "empty_list" args) ", ")) ");\n")))
              "" result-type))))

(defn call-static-variadic [target args]
  (let [arg-stmts (second args)
        args (map (first args) .c-val)
        num-args (count args)]
    (for [arity-sym (lookup-static-fn (.c-val target) :variadic)
          result-type (lookup-static-return-type (.c-val target) num-args)
          variadic-sym (genlocal "varArgs")
          result-sym (genlocal "rslt")
          _ (remember-local result-sym)]
      (let [arg-syms (cons "empty_list" args)]
        (c-code result-sym
                (comp (.init target)
                      arg-stmts
                      (list "List *" variadic-sym " = empty_list;\n")
                      (map (reverse (rest arg-syms))
                           (fn [arg-sym]
                             (str "incRef((Value *)" arg-sym ");\n"
                                  variadic-sym " = (List *)listCons("
                                  "(Value *)" arg-sym
                                  ", " variadic-sym ");\n")))
                      (list Value* result-sym " = " arity-sym "(" (first arg-syms) ", (Value *)"
                            variadic-sym ");\n"
                            "decRef((Value *)" variadic-sym ");\n"
                            "my_free((Value *)" variadic-sym ");\n"))
                "" result-type)))))

(defprotocol Emitter
  (emit-c [ast]
    (sm/state-maybe ast)))

(extend-type ast/inline-ast
  Emitter
  (emit-c [ast]
    (sm/state-maybe (c-code "" (list (.txt ast)) ""
                            (get (types) (.result-type ast) :no-type)))))

(extend-type ast/symbol-ast
  Emitter
  (emit-c [ast]
    (lookup-sym (.sym ast))))

(extend-type ast/keyword-ast
  Emitter
  (emit-c [ast]
    (sm/new-sm (fn [s]
                 (let [vs (let [v (get-in s (list :keywords (.kw ast)) not-found)]
                            (cond
                             (= not-found v) empty-list
                             (list v s)))]
                   (cond
                    (empty? vs) vs
                    (let [static-kw (first vs)
                          vs (let [s (second vs)
                                   v (get-in s (list :types 'Keyword) not-found)]
                               (cond
                                (= not-found v) empty-list
                                (list v s)))]
                      (cond
                       (empty? vs) vs
                       (let [type-num (first vs)]
                         (list (c-code (str "(Value *)&" static-kw)
                                       empty-list
                                       (str "SubString " static-kw)
                                       type-num)
                               (second vs)))))))))
    ;; (for [static-kw (sm/get-in-val (list :keywords (.kw ast)))
    ;;       type-num (sm/get-in-val (list :types 'Keyword))]
    ;;   (c-code (str "(Value *)&" static-kw)
    ;;           empty-list
    ;;           (str "SubString " static-kw)
    ;;           type-num))
    ))

(extend-type ast/const-number-ast
  Emitter
  (emit-c [ast]
    (for [static-num (comp (sm/get-in-val (list :numbers (.num ast)))
                           (sm/get-in-val (list :new-numbers (.num ast))))
          type-num (sm/get-in-val (list :types 'Number))]
      (c-code (str "(Value *)&" static-num)
              empty-list
              ""
              type-num))))

(extend-type ast/const-string-ast
  Emitter
  (emit-c [ast]
    (for [static-str (sm/get-in-val (list :strings (.const-str ast)) :no-static-str)
          type-num (sm/get-in-val (list :types 'String))]
      (c-code (str "(Value *)&" static-str)
              empty-list
              (str "String " static-str)
              type-num))))

(defn eval-exprs [ast]
  (for [exprs (fr/evaluate ast emit-c)]
    (reduce exprs (c-code "" empty-list "" :no-type)
            (fn [result expr]
              (c-code (.c-val expr)
                      (comp (.init result) (.init expr))
                      ""
                      (.type-num expr))))))

(defn gen-variadic-arg-syms [args]
  (cond
   (< 0 (count args))
   (traverse (range (count args))
             (fn [arg-index]
               (let [c-sym (str "arg" arg-index)
                     arg-type (cond
                               (= arg-index (dec (count args))) (get (types) 'List :no-type)
                               :no-type)]
                 (for [_ (sm/assoc-in-val (list :local-syms (nth args arg-index ""))
                                          (c-code c-sym empty-list "" arg-type))]
                   c-sym))))

   (sm/state-maybe empty-list)))

(defn gen-arg-syms [args]
  (cond
   (< 0 (count args))
   (traverse (range (count args))
             (fn [arg-index]
               (let [c-sym (str "arg" arg-index)]
                 (for [_ (sm/assoc-in-val (list :local-syms (nth args arg-index ""))
                                          (c-code c-sym empty-list "" :no-type))]
                   c-sym))))

   (sm/state-maybe empty-list)))

(defn base-types []
  (let [types (types)]
    (write-strs (list
                 "#include <sys/types.h>\n"
                 "#include <stdio.h>\n"
                 "#include <string.h>\n\n"
                 Value
                 NumberVal
                 StringVal
                 SubStringVal
                 ListVal
                 FnArityVal
                 FunctionVal
                 ProtoImpl
                 ProtoImpls
                 ReifiedVal
                 OpaqueVal
                 BitmapIndexedVal
                 ArrayNodeVal
                 "List *listCons(Value *x, List *l);\n"
                 "Value *stringValue(char *s);\n"
                 "const int64_t NumberType;\n"
                 "const int64_t KeywordType;\n"
                 "const int64_t SymbolType;\n"
                 "const int64_t StringType;\n"
                 "const int64_t SubStringType;\n"
                 "const int64_t ListType;\n"
                 "const int64_t FunctionType;\n"
                 "const int64_t OpaqueType;\n"
                 "const int64_t BitmapIndexedType;\n"
                 "List *empty_list;\n"
                 "Value *number_literals();\n"
                 "Value *counts();\n"
                 "Value *types();\n"
                 "Value *symbol_literals();\n"
                 "Value *keyword_literals();\n"
                 "Value *string_literals();\n"
                 "Value *defined_syms();\n"
                 "Value *static_fns();\n"
                 "Value *protocols();\n"
                 "\n"))))

(defn extern-fn [name variadic return-type & arg-types]
  (let [arg-types (comp arg-types
                        (cond
                         variadic (list "...")
                         empty-list))]
    (apply-to list
              (write-strs (list "extern " return-type " " name "("))
              (write-strs (interpose arg-types ", "))
              (write ");\n"))))

(defn extern-functions []
  (apply-to list
            (write "\n")
            (extern-fn 'abort 0 VoidT)
            (extern-fn 'printf 1 Int32 "const char *")
            (extern-fn 'free 0 VoidT "void *")
            (extern-fn 'malloc 0 "void *" "unsigned long")))

(defn const-strings [strs type]
  (let [strs (seq strs)]
    (cond
     (< 0 (count strs))
     (traverse strs (fn [const-str]
                      (let [str-ptr (nth const-str 1 "noString_ptr")
                            str-val (nth const-str 0 "noString_name")
                            str-len (count str-val)]
                        (write-strs (list
                                     "struct {int64_t type;\n int32_t refs;\n   int64_t len;\n   char buffer["
                                     (inc str-len)
                                     "];} " str-ptr " = {" type ", -1, "
                                     str-len ",\"" (escape-chars str-val) "\"};\n")))))

     (sm/state-maybe ""))))

(defn static-syms [syms sym-type]
  (let [syms (seq syms)]
    (cond
     (< 0 (count syms))
     (traverse syms
               (fn [sym]
                 (write-strs (list "SubString "
                                   (nth sym 1 "no_symbol_val")
                                   " = {"
                                   sym-type
                                   ", -1, " (count (str (nth sym 0 "no_symbol_name"))) ", 0, \""
                                   (nth sym 0 "no_symbol_name")
                                   "\"};\n"))))

     (sm/state-maybe ""))))

(defn static-numbers [nums num-type]
  (let [nums (seq nums)]
    (cond
     (< 0 (count nums))
     (traverse nums
               (fn [num]
                 (write-strs (list "Number "
                                   (nth num 1 "noNumber_sym")
                                   " = {"
                                   num-type
                                   ", -1, "
                                   (nth num 0 "noNumber_val")
                                   "};\n"))))

     (sm/state-maybe ""))))

(defn static-values []
  (let [types (types)]
    (for [strs (sm/get-in-val (list :new-strings) empty-list)
          _ (apply-to list
                      (const-strings strs (get types 'String "no_String_type"))
                      (sm/update-in-val (list :strings)
                                        (fn [old-strs]
                                          (comp old-strs strs)))
                      (sm/assoc-in-val (list :new-strings) {}))

          nums (sm/get-in-val (list :new-numbers) empty-list)
          _ (apply-to list
                      (static-numbers nums (get types 'Number "no_Number_type"))
                      (sm/update-in-val (list :numbers)
                                        (fn [old-nums]
                                          (comp old-nums nums)))
                      (sm/assoc-in-val (list :new-numbers) {}))

          syms (sm/get-in-val (list :new-symbols) empty-list)
          _ (apply-to list
                      (static-syms syms (get types 'Symbol "no_Symbol_type"))
                      (sm/update-in-val (list :symbols)
                                        (fn [old-sys]
                                          (comp old-sys syms)))
                      (sm/assoc-in-val (list :new-symbols) {}))

          kws (sm/get-in-val (list :new-keywords) empty-list)
          _ (apply-to list
                      (static-syms kws (get types 'Keyword "no_Keyword_type"))
                      (sm/update-in-val (list :keywords)
                                        (fn [old-kws]
                                          (comp old-kws kws)))
                      (sm/assoc-in-val (list :new-keywords) {}))]
      "")))


(defn fixed-fn-types []
  (traverse (range 10)
            (fn [arg-count]
              (cond
               (= arg-count 0)
               (write-strs (list "typedef Value *(FnType0)(List *);\n"))

               (apply-to list
                         (write-strs (list "typedef Value *(FnType" arg-count ")("))
                         (write-strs (interpose (cons "List *"
                                                      (repeat arg-count "Value *"))
                                                ", "))
                         (write ");\n"))))))

(defn add-module-info [ns-sym module-name]
  (for [new-mod-syms (sm/get-in-val (list :modules module-name :syms))
        _ (cond
           (empty? new-mod-syms) (sm/state-maybe "")
           (traverse (seq new-mod-syms)
                     (fn [sym-def]
                       (cond
                        (= "." (subs (str (first sym-def)) 0 1))
                        (sm/assoc-in-val (list :defined-syms (first sym-def))
                                         (second sym-def))

                        (sm/assoc-in-val (list :defined-syms (symbol (str ns-sym "/" (first sym-def))))
                                         (second sym-def))))))

        new-mod-protos (sm/get-in-val (list :modules module-name :protos) {})
        _ (cond
           (empty? new-mod-protos) (sm/state-maybe "")
           (traverse (seq new-mod-protos)
                     (fn [proto-def]
                       (let [ns-name (symbol (str ns-sym "/" (first proto-def)))]
                         (cond
                          (= "." (subs (str (first proto-def)) 0 1))
                          (sm/assoc-in-val (list :defined-protos (first proto-def))
                                           (second proto-def))

                          (sm/assoc-in-val (list :defined-protos ns-name)
                                           (second proto-def)))))))

        new-mod-types (sm/get-in-val (list :modules module-name :types) {})
        _ (cond
           (empty? new-mod-types) (sm/state-maybe "")
           (traverse (seq new-mod-types)
                     (fn [type-def]
                       (let [ns-name (symbol (str ns-sym "/" (first type-def)))]
                         (sm/assoc-in-val (list :defined-types ns-name)
                                          (second type-def))))))]
    (c-code "" empty-list "" :no-type)))

(extend-type ast/add-ns-ast
  Emitter
  (emit-c [ast]
    (let [module-name (.const-str (.v (first (.asts ast))))]
      (comp
       (add-module-info (.ns-sym ast) module-name)
       (for [syms (sm/get-val :defined-syms {})
             _ (sm/set-val :defined-syms {})

             types (sm/get-val :defined-types {})
             _ (sm/set-val :defined-types {})

             protos (sm/get-val :defined-protos {})
             core-protos (sm/get-in-val (list :modules "core" :protos) {})
             _ (sm/set-val :defined-protos (reduce (filter (seq protos)
                                                           (fn [x]
                                                             (= "." (subs (str (first x)) 0 1))))
                                                   core-protos
                                                   (fn [m proto]
                                                     (assoc m (first proto) (second proto)))))

             file-name (sm/get-val :file-name)
             _ (sm/set-val :file-name module-name)

             _ (traverse (.asts ast) (fn [ast] (fr/evaluate ast emit-c)))

             _ (sm/set-val :file-name file-name)
             _ (sm/set-val :defined-syms syms)
             _ (sm/set-val :defined-protos protos)
             _ (sm/set-val :defined-types types)

             _ (add-module-info (.ns-sym ast) module-name)]
         (c-code "" empty-list "" :no-type))))))

(defn unpack-closures [arg-syms]
  (cond
   (empty? (rest arg-syms)) (list (str "Value *" (first arg-syms) " = (Value *)argsList;\n"))
   (let [results (unpack-closures (rest arg-syms))]
     (list* "Value *" (first arg-syms)
            " = argsList->head;\n"
            "if (argsList->tail) argsList->tail->len = argsList->len - 1;\n"
            "argsList = argsList->tail;\n"
            results))))

(extend-type ast/variadic-arity-ast
  Emitter
  (emit-c [ast]
    (let [c-args (list "closures" "varArgs")
          arg-count (count (.args ast))
          arity-fn-sym (gensym "arityImpl_")]
      (for [arity-sym (genlocal "arity_")
            fn-context (reset-fn-context arity-fn-sym arg-count)
            arg-syms (gen-variadic-arg-syms (.args ast))
            scope-info (begin-scope)
            body-exprs (eval-exprs (.body ast))
            _ (emit-externs)
            _ (write-strs (list "Value *" arity-fn-sym "(List *closures, Value *varArgs) {\n"
                                "List *argsList = (List *)varArgs;\n"))
            _ (write-strs (unpack-closures arg-syms))

            :let [result-sym (.c-val body-exprs)]
            _ (apply-to list
                        (emit-closures)
                        (write-strs (.init body-exprs))
                        (write-strs (cond
                                     (= result-sym "") empty-list
                                     (list "incRef(" result-sym ");\n")))
                        (for [scope-locals (sm/get-val :scope-locals)
                              _ (write-strs (map (seq scope-locals)
                                                 (fn [local]
                                                   (cond
                                                    (not (second local)) ""
                                                    (str "decRef(" (first local) ");\n"
                                                         "my_free(" (first local) ");\n")))))]
                          "")
                        (end-scope scope-info)
                        (cond
                         (= result-sym "") (sm/state-maybe "")
                         (write-strs (list "return(" result-sym ");\n")))
                        (write "};\n"))
            closures (sm/get-val :closed-over empty-list)
            _ (restore-fn-context fn-context)
            result (cond
                    (< 0 (count closures)) (arity-closes-over arity-sym arity-fn-sym
                                                              c-args closures 1
                                                              (.type-num body-exprs))
                    (static-arity arity-fn-sym c-args 1 (.type-num body-exprs)))]
        result))))

(extend-type ast/fn-arity-ast
  Emitter
  (emit-c [ast]
    (let [arity-fn-sym (gensym "arityImpl_")]
      (for [arity-sym (genlocal "arity_")
            fn-context (reset-fn-context arity-fn-sym (count (.args ast)))
            arg-syms (gen-arg-syms (.args ast))
            scope-info (begin-scope)
            body-exprs (eval-exprs (.body ast))
            _ (emit-externs)

            :let [result-sym (.c-val body-exprs)]
            _ (apply-to list
                        (write-strs (list "Value *" arity-fn-sym "("))
                        (write-strs (interpose (cons "List *closures"
                                                     (map arg-syms (fn [arg] (str "Value *" arg))))
                                               ", "))
                        (write ") {\n")
                        (emit-closures)
                        (write-strs (.init body-exprs))
                        (write-strs (cond
                                     (= result-sym "") empty-list
                                     (list "incRef(" result-sym ");\n")))
                        (for [scope-suffix (for [scope-locals (sm/get-val :scope-locals)]
                                             (map (seq scope-locals)
                                                  (fn [local]
                                                    (cond
                                                     (not (second local)) ""
                                                     (str "decRef(" (first local) ");\n"
                                                          "my_free(" (first local) ");\n")))))
                              _ (write-strs scope-suffix)]
                          "")
                        (end-scope scope-info)
                        (cond
                         (= result-sym "") (sm/state-maybe "")
                         (write-strs (list "return(" result-sym ");\n")))
                        (write "};\n\n"))
            closures (sm/get-val :closed-over empty-list)
            _ (restore-fn-context fn-context)
            result (cond
                    (< 0 (count closures)) (arity-closes-over arity-sym arity-fn-sym
                                                              arg-syms closures 0
                                                              (.type-num body-exprs))
                    (static-arity arity-fn-sym arg-syms 0 (.type-num body-exprs)))]
        result))))

(extend-type ast/main-ast
  Emitter
  (emit-c [ast]
    (let [main-sym (gensym "main_")]
      (for [_ (static-values)
            _ (sm/set-val :main-sym main-sym)
            arg-syms (gen-arg-syms (.args ast))
            _ (sm/set-val :local-sym-count 0)
            scope-info (begin-scope)
            body (eval-exprs (.body ast))
            _ (emit-externs)
            _ (write-strs (list "\nint " main-sym " ("))
            _ (write-strs (interpose (map arg-syms (fn [arg] (str "Value *" arg)))
                                     ", "))
            _ (write ") {\n")
            _ (write-strs (.init body))
            scope-locals (sm/get-val :scope-locals)
            _ (write-strs (map (seq scope-locals)
                               (fn [local]
                                 (cond
                                  (not (second local)) ""
                                  (str "decRef(" (first local) ");\n"
                                       "my_free(" (first local) ");\n")))))
            _ (write "\nreturn(0);\n}\n\n")]
        (c-code "" empty-list "" :no-type)))))

(defn eval-args [args]
  (cond
   (empty? args) (sm/state-maybe (list empty-list empty-list))
   (for [evalled (traverse args (fn [arg-ast] (fr/evaluate arg-ast emit-c)))]
     (reduce evalled (list empty-list empty-list)
             (fn [results evalled]
               (let [args (nth results 0 empty-list)
                     stmts (nth results 1 empty-list)
                     evalled-stmts (.init evalled)]
                 (list (comp args (list evalled))
                       (comp stmts evalled-stmts))))))))

(extend-type ast/call-ast
  Emitter
  (emit-c [ast]
    (for [target (fr/evaluate (.callee ast) emit-c)
          args (eval-args (.params ast))
          result (comp (call-proto-impl (.callee ast) args)
                       (call-static-fixed target args)
                       (call-static-variadic target args)
                       (call-recursive target args)
                       (call-dyn-fn-value target args)
                       (call-dyn-unknown-type target args)
                       (call-dyn-known-type target args)
                       (sm/new-sm (fn [s]
                                    (print-err (str "could not emit callsite for '"
                                                    (first (fr/evaluate (.callee ast) string-list))
                                                    "'"))
                                    (print-err :target (.c-val target))
                                    (abort))))]
      result)))

(extend-type ast/binding-ast
  Emitter
  (emit-c [ast]
    (for [evalled (fr/evaluate (.val ast) emit-c)
          _ (sm/assoc-in-val (list :local-syms (.binding ast))
                             (c-code (.c-val evalled) empty-list "" (.type-num evalled)))]
      (c-code "" (.init evalled) "" :no-type))))

(extend-type ast/let-ast
  Emitter
  (emit-c [ast]
    (for [locals (sm/get-val :local-syms {})
          bindings (fr/evaluate (.bindings ast) emit-c)
          body-exprs (eval-exprs (.body ast))
          _ (sm/set-val :local-syms locals)]
      (c-code (.c-val body-exprs)
              (comp (crush bindings .init)
                    (.init body-exprs))
              ""
              (.type-num body-exprs)))))

(extend-type ast/fn-ast
  Emitter
  (emit-c [ast]
    (let [arity-count (count (.arities ast))
          fn-sym (gensym "fn_")
          fn-type (get (types) 'Function :no-type)]
      (for [_ (static-values)
            curr-fn-sym (sm/get-val :curr-fn-sym "")
            :let [fn-sym-str (str "(Value *)" fn-sym)]
            _ (sm/set-val :curr-fn-sym fn-sym)
            _ (write-strs (list "\n// --------- " (.args ast) " --------------\n"
                                "Function " fn-sym ";\n"))
            _ (remember-local fn-sym-str)
            ;; TODO: check for anon fn, save previous value of
            ;; :defined-sym and restore at end
            _ (sm/assoc-in-val (list :defined-syms (.args ast))
                               (list (str "Function " fn-sym)
                                     (c-code (str "(Value *)&" fn-sym) empty-list "" fn-type)))
            arity-vals (traverse (.arities ast) (fn [arity]
                                                  (fr/evaluate arity emit-c)))
            :let [arity-syms (map arity-vals .c-val)
                  arity-init (crush arity-vals .init)
                  static-arities (crush arity-vals .decl)]
            _ (cond
               (= 0 (count arity-init))
               (apply-to list
                         (write-strs (list "\n// --------- " (.args ast) " main body --------------\n"
                                           "Function " fn-sym " = {"
                                           fn-type ", -1, \""
                                           (.args ast) "\", " arity-count ", "
                                           "{" (apply str (interpose arity-syms ", ")) "}};\n\n"))
                         (sm/assoc-in-val (list :scope-locals fn-sym-str) false)
                         (sm/assoc-in-val (list :static-fns (str "(Value *)&" fn-sym)) static-arities))

               (sm/state-maybe ""))
            _ (sm/set-val :curr-fn-sym curr-fn-sym)]
        (cond
         (= 0 (count arity-init))
         (c-code (str "(Value *)&" fn-sym) empty-list (str "Function " fn-sym) fn-type)

         (c-code (str "(Value *)" fn-sym)
                 (comp arity-init
                       (list (str "Function *" fn-sym " = malloc_function(" arity-count ");\n")
                             (str fn-sym "->type = " fn-type ";\n")
                             (str fn-sym "->name = \"" (.args ast) "\";\n")
                             (str fn-sym "->arityCount = " arity-count ";\n"))
                       (map (range arity-count)
                            (fn [index]
                              (str fn-sym "->arities[" index "] = "
                                   (nth arity-syms index "") ";\n"))))
                 (str "Function " fn-sym)
                 fn-type))))))

(extend-type ast/quoted-ast
  Emitter
  (emit-c [ast]
    (let [sym (.sym ast)]
      (for [sym-val (sm/get-in-val (list :symbols sym) :no-static-sym)]
        (let [_ (cond
                 (= :no-static-sym sym-val) (print-err "not found" sym)
                 "")]
          (c-code (str "(Value *)&" sym-val) empty-list ""
                  (get (types) 'Symbol :no-type)))))))

(defn forward-decl [name type-num]
  (let [c-name (gensym "var_")]
    (for [_ (write-strs (list (str "// forward declaration for '" name "'\n")
                              (str "Value *" c-name ";\n\n")))
          file-name (sm/get-val :file-name)
          _ (sm/assoc-in-val (list :modules file-name :syms name)
                             (list (str "Value *" c-name)
                                   (c-code c-name empty-list "" type-num)))
          _ (sm/assoc-in-val (list :defined-syms name)
                             (list (str "Value *" c-name)
                                   (c-code c-name empty-list "" type-num)))]
      (c-code "" empty-list "" :no-type))))

(defn define-fwd-decl [name value]
  (for [c-name (sm/get-in-val (list :defined-syms name))
        evalled-expr (fr/evaluate value emit-c)
        :let [c-name (.c-val (second c-name))
              result-sym (.c-val evalled-expr)
              initialization (.init evalled-expr)
              init-count (count initialization)
              initialization (cond
                              (empty? initialization) (list "")
                              initialization)]
        _ (cond
           (= result-sym "") (write-strs (list "Value *" c-name " = " (first initialization)))
           (< 1 init-count) (sm/state-maybe (let [_ (print-err (str "invalid definition: " name))]
                                              (abort)))
           (write-strs (list (first initialization)
                             Value* c-name " = " result-sym ";\n")))]
    (c-code "" empty-list "" (.type-num evalled-expr))))

(defn inline-text-definition [name initialization]
  (let [c-name (gensym "var_")]
    (for [_ (write-strs (list Value* c-name " = " (first initialization) ";\n"))
          _ (sm/assoc-in-val (list :defined-syms name)
                             (list (str "Value *" c-name ";")
                                   (c-code c-name empty-list "" :no-type)))]
      c-name)))

(defn expression-definition [name result-sym initialization extern-def expr-type]
  (let [c-name (gensym "var_")]
    (for [_ (cond
             (< 0 (count initialization)) (write (first initialization))
             (sm/state-maybe ""))
          file-name (sm/get-val :file-name)
          _ (sm/assoc-in-val (list :modules file-name :syms name)
                             (list extern-def (c-code result-sym empty-list "" expr-type)))
          _ (sm/assoc-in-val (list :defined-syms name)
                             (list extern-def (c-code result-sym empty-list "" expr-type)))]
      c-name)))

(defn define-value [name value]
  (for [evalled-expr (fr/evaluate value emit-c)
        :let [result-sym (.c-val evalled-expr)
              initialization (.init evalled-expr)
              extern-def (.decl evalled-expr)
              expr-type (.type-num evalled-expr)]
        _ (cond
           (= result-sym "") (inline-text-definition name initialization)
           (< 1 (count initialization)) (sm/state-maybe (let [_ (print-err (str "invalid definition: " name))]
                                                          (abort)))
           (expression-definition name result-sym initialization extern-def expr-type))]
    (c-code "" empty-list "" :no-type)))

(extend-type ast/definition-ast
  Emitter
  (emit-c [ast]
    (flat-map (static-values)
              (fn [_]
                (cond
                 (= :no-value (.value ast)) (forward-decl (.name ast) :no-type)
                 (comp (define-fwd-decl (.name ast) (.value ast))
                       (define-value (.name ast) (.value ast))))))))

(defn eval-cond-clause [clauses default cond-result]
  (let [clause (first clauses)]
    (for [_ (begin-scope)
          test (fr/evaluate (first clause) emit-c)
          :let [test-sym (.c-val test)
                test-stmts (.init test)]
          test-suffix (for [scope-locals (sm/get-val :scope-locals)]
                        (map (remove (seq scope-locals)
                                     (partial = test-sym))
                             (fn [local]
                               (cond
                                (not (second local)) ""
                                (str "decRef(" (first local) ");\n"
                                     "my_free(" (first local) ");\n")))))
          _ (begin-scope)
          clause-result (fr/evaluate (second clause) emit-c)
          :let [clause-sym (.c-val clause-result)
                clause-stmts (.init clause-result)]
          clause-suffix (for [scope-locals (sm/get-val :scope-locals)]
                          (map (seq scope-locals)
                               (fn [local]
                                 (cond
                                  (not (second local)) ""
                                  (str "decRef(" (first local) ");\n"
                                       "my_free(" (first local) ");\n")))))
          cond-rest (cond
                     (empty? (rest clauses))
                     (sm/state-maybe (c-code cond-result (nth default 1 empty-list)
                                             "" (.type-num clause-result)))

                     (eval-cond-clause (rest clauses) default cond-result))]
      (let [result-type (cond
                         (= (.type-num cond-rest) (.type-num clause-result)) (.type-num clause-result)
                         :no-type)]
        (c-code cond-result
                (comp test-stmts
                      test-suffix
                      (list "\nif (isTrue(" test-sym ")) {\n"
                            "decRef(" test-sym ");\n"
                            "my_free(" test-sym ");\n")
                      clause-stmts
                      (list "incRef(" clause-sym ");\n")
                      (list (str cond-result " = " clause-sym ";\n"))
                      clause-suffix
                      (list "} else {\n"
                            "decRef(" test-sym ");\n"
                            "my_free(" test-sym ");\n")
                      (.init cond-rest)
                      (list "}\n"))
                ""
                result-type)))))

(extend-type ast/cond-ast
  Emitter
  (emit-c [ast]
    (for [cond-result (genlocal "cond")
          :let [cond-result (str cond-result)]
          scope-info (begin-scope)
          default (fr/evaluate (.default ast) emit-c)
          :let [default-result (.c-val default)
                default-type (.type-num default)]
          default-suffix (for [scope-locals (sm/get-val :scope-locals)]
                           (map (seq scope-locals)
                                (fn [local]
                                  (cond
                                   (not (second local)) ""
                                   (str "decRef(" (first local) ");\n"
                                        "my_free(" (first local) ");\n")))))
          :let [default-stmts (comp (.init default)
                                    (list "incRef(" default-result ");\n")
                                    (list cond-result " = " default-result ";\n")
                                    default-suffix)
                default (list default-result default-stmts)]
          evalled-clauses (eval-cond-clause (.clauses ast) default cond-result)
          _ (end-scope scope-info)
          _ (remember-local cond-result)]
      (let [result-type (cond
                         (= (.type-num evalled-clauses) default-type) default-type
                         :no-type)]
        (c-code cond-result
                (comp (list "Value *" cond-result ";\n")
                      (.init evalled-clauses))
                "" result-type)))))

(defn emit-extension [type-num proto]
  (for [_ (traverse (nth proto 1 empty-list)
                    (fn [impl]
                      (let [impl-fn (nth impl 1 "")
                            num-args (count (.args (.v (first (.arities (.v impl-fn))))))]
                        (for [ext-fn (fr/evaluate impl-fn emit-c)
                              _ (write-strs (.init ext-fn))
                              proto-fn-name (sm/get-in-val (list :defined-protos (first impl)))
                              _ (sm/assoc-in-val (list :protocols proto-fn-name :impls
                                                       type-num :fn-sym)
                                                 (.c-val ext-fn))]
                          ""))))]
    (c-code "" empty-list "" :no-type)))

(extend-type ast/extend-ast
  Emitter
  (emit-c [ast]
    (for [type-num (comp (sm/get-in-val (list :defined-types (.type ast)))
                         (sm/get-in-val (list :types (.type ast)) :no-type))
          _ (traverse (seq (.impls ast)) (partial emit-extension type-num))]
      (c-code "" empty-list "" :no-type))))

(defn emit-reified-fn [protocol-name type-num name-ast]
  (let [name (first name-ast)
        ast (second name-ast)
        num-args (count (.args (.v (first (.arities (.v ast))))))
        impl-sym (gensym "protoImpl_")
        fn-sym (gensym "protoFn_")]
    (alert (< 0 num-args)
           (str "invalid protocol fn spec for" name))
    (for [evalled (fr/evaluate ast emit-c)
          :let [args (map (range num-args) (fn [idx] (str "arg" idx)))
                arg-decls (apply str (interpose (cons (str "List *closures")
                                                      (map args (fn [arg] (str "Value *" arg))))
                                                ", "))
                args (apply str (interpose (cons "closures" args) ", "))]
          reify-fn-index (sm/get-val :reify-fn-index 0)
          _ (sm/set-val :reify-fn-index (inc reify-fn-index))
          _ (write-strs (list "Value *" impl-sym "(" arg-decls ") {\n"
                              "FnArity *arityPtr = ((Function *)((ReifiedVal *)arg0)->impls["
                              reify-fn-index "])->arities[0];\n"
                              "Value *rval = ((FnType" num-args " *)arityPtr->fn)(arityPtr->" args ");\n"
                              "return(rval);\n"
                              "};\n\n"
                              "Function " fn-sym " = {" (get (types) 'Function :no-fn-type)
                              ", -1, \"" name
                              "\", 1, {&(FnArity){" (get (types) 'FnArity :no-fn-type) ", -1, "
                              num-args ", (List *)0, 0, " impl-sym"}}};\n\n"))
          proto-fn-name (sm/get-in-val (list :defined-protos name))
          return-type (lookup-static-return-type (.c-val evalled) num-args)
          _ (sm/assoc-in-val (list :static-fns (str "(Value *)&" fn-sym))
                             {num-args {:fn-sym impl-sym
                                        :return-type return-type}})
          _ (sm/assoc-in-val (list :protocols proto-fn-name :impls type-num :fn-sym)
                             (str "(Value *)&" fn-sym))]
      evalled)))

(defn reified-type [type-num impl-fns]
  (for [reified-sym (genlocal "reified_")
        _ (remember-local reified-sym)]
    (let [inits (crush impl-fns .init)
          impls-syms (map impl-fns .c-val)
          reify-init (list* "Value *" reified-sym " = (Value *)malloc_reified(" (count impls-syms) ");\n"
                            "((ReifiedVal *)" reified-sym ")->type = " type-num ";\n"
                            "((ReifiedVal *)" reified-sym ")->implCount = " (count impl-fns) ";\n"
                            (map (range (count impl-fns))
                                 (fn [index]
                                   (let [sym-init (nth impl-fns index empty-list)
                                         sym (.c-val sym-init)]
                                     (str "((ReifiedVal *)" reified-sym ")->impls[" index "] = " sym ";\n"
                                          "incRef(" sym ");\n")))))]
      (c-code reified-sym (comp inits reify-init) "" type-num))))

(defn static-reified [type-num impl-fns]
  (let [reified-sym (gensym "reified_")]
    (for [_ (write-strs (list "ReifiedVal " reified-sym " = {"
                              type-num ", -1, " (count impl-fns) ", {"
                              (apply str (interpose (map impl-fns .c-val) ", "))
                              "}};\n"))]
      (c-code (str "(Value *)&" reified-sym) empty-list (str "ReifiedVal " reified-sym)
              type-num))))

(extend-type ast/reify-ast
  Emitter
  (emit-c [ast]
    (cond
     (empty? (.impls ast)) (let [_ (print-err :no-impls)]
                             (c-code "" empty-list "" :no-type))
     (for [types (sm/get-val :types {})
           :let [type-num (inc (count (seq types)))]
           _ (sm/assoc-in-val (list :types type-num) type-num)
           reify-fn-index (sm/get-val :reify-fn-index 0)
           _ (sm/set-val :reify-fn-index 0)
           impl-fns (apply* (sm/state-maybe list)
                            (for [impl (seq (.impls ast))
                                  impl-fn (second impl)]
                              (emit-reified-fn (first impl) type-num impl-fn)))
           _ (sm/set-val :reify-fn-index reify-fn-index)
           reified-result (cond
                           (= 0 (count (crush impl-fns .init)))
                           (static-reified type-num impl-fns)

                           (reified-type type-num impl-fns))]
       reified-result))))

(defn emit-proto-default [arity]
  (let [default-impl (get (nth arity 1 {}) :default :no-default)]
    (cond
     (= :no-default default-impl) (sm/state-maybe empty-list)

     (for [default-fn (fr/evaluate default-impl emit-c)
           _ (write-strs (.init default-fn))]
       (list (.c-val default-fn))))))

(defn emit-proto-arity [name fn-sym impls-sym arity]
  (let [num-args (nth arity 0 1)
        args (map (range num-args) (fn [idx] (str "arg" idx)))
        c-name (gensym "protoFnImpl_")
        arity-sym (gensym "protoFnArity_")]
    (for [type-name-fn (comp (for [type-name-sym (lookup-sym* 'type-name)
                                   type-name-arity-sym (lookup-static-fn (.c-val type-name-sym) 1)]
                               (str "%s\\n\", extractStr(" type-name-arity-sym "(empty_list, arg0))"))
                             (sm/state-maybe "%lld\\n\", arg0->type"))
          _ (apply-to list
                      (write-strs (list "Value *" c-name "("))
                      (write-strs
                       (interpose (cons "List *closures" (map args (fn [arg] (str "Value *" arg))))
                                  ", "))
                      (write-strs
                       (list ") {\n"
                             "  Function *implFn = (Function *)findProtoImpl(arg0->type, "
                             impls-sym ");\n"
                             "  if(implFn == (Function *)0) {\n"
                             "   fprintf(stderr, \"\\n*** Could not find proto impl for '"
                             name "' " type-name-fn ");\nabort();\n}\n"
                             "  FnArity *_arity = findFnArity((Value *)implFn, " num-args ");\n"
                             "  if(_arity == (FnArity *)0 || _arity->variadic) {\n"
                             "    fprintf(stderr, \"\\n*** Invalid number of args in call to '"
                             name "'\\n\");\n"
                             "    abort();\n}\n"
                             "  FnType" num-args " *_fn = (FnType" num-args " *)_arity->fn;\n"
                             "  return(_fn("))
                      (write-strs (interpose (cons "_arity->closures" args) ", "))
                      (write-strs (list "));\n}\n"
                                        "FnArity "
                                        (str arity-sym) " = {"  (get (types) 'FnArity :no-fn-type) ", -1, "
                                        (str num-args) ", (List *)0, 0, "
                                        (str c-name) "};\n"))
                      (sm/assoc-in-val (list :static-fns (str "(Value *)&" fn-sym) num-args :fn-sym) c-name))]
      (str "&" arity-sym))))

(defn emit-proto-fn [protocol-name proto]
  (let [name (first proto)
        arities (seq (second proto))
        qualified-name (str protocol-name name)
        impls-sym (gensym "protoImpls_")
        fn-sym (gensym "protoFn_")
        default-fn-sym (gensym "defaultFn_")
        fn-type (get (types) 'Function :no-fn-type)]
    (for [_ (write-strs (list "ProtoImpls *" impls-sym ";\n"))
          default-syms (crush arities emit-proto-default)
          arity-syms (traverse arities (partial emit-proto-arity name fn-sym impls-sym))
          file-name (sm/get-val :file-name)
          _ (apply-to list
                      (cond
                       (empty? default-syms) (sm/state-maybe "")
                       (write-strs (list "Function " default-fn-sym " = {" fn-type
                                         ", -1, \"" name "\", " (count default-syms)
                                         ", {" (apply str (interpose default-syms ",\n"))
                                         "}};\n\n")))
                      (write-strs (list "Function " (str fn-sym)  " = {" fn-type
                                        ", -1, \"" (str name) "\", " (count arity-syms)
                                        ", {" (apply str (interpose arity-syms ",\n")) "}};\n\n"))

                      (sm/assoc-in-val (list :modules file-name :syms name)
                                       (list (str "Function " fn-sym)
                                             (c-code (str "(Value *)&" fn-sym) empty-list ""
                                                     fn-type)))
                      (sm/assoc-in-val (list :modules file-name :protos name) qualified-name)

                      (sm/assoc-in-val (list :defined-syms name)
                                       (list (str "Function " fn-sym)
                                             (c-code (str "(Value *)&" fn-sym) empty-list ""
                                                     fn-type)))
                      (sm/assoc-in-val (list :defined-protos name) qualified-name)

                      (sm/assoc-in-val (list :protocols qualified-name)
                                       {:impls-sym impls-sym
                                        :name name
                                        :impls (cond
                                                (empty? default-syms) {}
                                                {:default {:fn-sym (str "(Value *)&" default-fn-sym)}})
                                        :extern-def (str "extern Function " fn-sym ";")}))]
      fn-sym)))

(extend-type ast/protocol-ast
  Emitter
  (emit-c [ast]
    (for [_ (static-values)
          file-name (sm/get-val :file-name "")
          :let [qualified-proto-name (str file-name "/" (.protocol-name ast) "/")]
          result (traverse (seq (.prototypes ast)) (partial emit-proto-fn qualified-proto-name))]
      (c-code "" empty-list "" :no-type))))

(defn replace-type [types type-val-num name]
  (cond
   (empty? types) (list (list name type-val-num))
   (= (first (first types)) type-val-num) (cons (list name type-val-num)
                                                (rest types))
   (cons (first types) (replace-type (rest types) type-val-num name))))

(extend-type ast/type-ast-val
  Emitter
  (emit-c [ast]
    (for [types (sm/get-val :types {})
          :let [type-val-num (+ 2 (count (seq types)))]

          _ (an/analyze-expr type-val-num)
          _ (cond
             (empty? (.fields ast)) (sm/state-maybe "")
             (traverse (.fields ast)
                       (fn [field]
                         (let [getter-name (symbol (str "." field))]
                           (comp (sm/get-in-val (list :protocols (str "Getter/" getter-name)))
                                 (emit-proto-fn "Getter/"
                                                (list getter-name (list (list 1 {})))))))))
          _ (comp (sm/get-in-val (list :defined-syms (.name ast)))
                  (forward-decl (.name ast) (dec type-val-num)))
          type-ast (an/analyze-expr (list 'reify
                                       'Type
                                       (list 'instance? (list 'vector '_ 'v)
                                             (list '= type-val-num (list 'get-type 'v)))
                                       'Function
                                       (list 'invoke (cons 'vector (cons '_ (.fields ast)))
                                             (.impls ast))))
          _ (static-values)
          result (define-fwd-decl (.name ast) type-ast)

          file-name (sm/get-val :file-name)
          _ (sm/assoc-in-val (list :modules file-name :types (.name ast)) type-val-num)
          _ (sm/assoc-in-val (list :defined-types (.name ast)) type-val-num)

          _ (sm/update-in-val (list :types)
                              (fn [types]
                                (reduce (replace-type (seq types) type-val-num (.name ast))
                                        {}
                                        (fn [m kv]
                                          (apply assoc m kv)))))]
      result)))

(defn core-base-fns []
  (write-strs (list "\n"
                    "FILE *outStream;\n"
                    "long long malloc_count;\n"
                    "long long free_count;\n"
                    "int recycledFunction;\n"
                    "int recycledReified;\n"
                    "Value* true;\n"
                    "Value* false;\n"
                    "Number trueVal;\n"
                    "Number falseVal;\n"
                    "int bitpos(int hash, int shift);\n"
                    "int mask(int hash, int shift);\n"
                    "char *extractStr(Value *v);\n"
                    "Value *my_malloc(int64_t);\n"
                    "SubString *malloc_substring();\n"
                    "FnArity *malloc_fnArity();\n"
                    "List *malloc_list();\n"
                    "Number *malloc_number();\n"
                    "Function *malloc_function(int arityCount);\n"
                    "ReifiedVal *malloc_reified(int implCount);\n"
                    "void incRef(Value *);\n"
                    "void decRef(Value *);\n"
                    "void my_free(Value *);\n"
                    "int isTrue(Value *boolVal);\n"
                    "Value *findProtoImpl(int64_t type, ProtoImpls *impls);\n"
                    "FnArity *findFnArity(Value *fnVal, int argCount);\n"
                    "Value *stringValue(char *s);\n"
                    "Value *keywordValue(char *s);\n"
                    "Value *symbolValue(char *s);\n"
                    "Value *makeSubstr(int64_t len, Value *str, char *subsStart);\n"
                    "Value *numberValue(int64_t n);\n"
                    "List *listCons(Value *x, List *l);\n")))

(defn base-fns []
  (write-strs (list "\n"
                    "FILE *outStream;\n"
                    "Number trueVal = {" (get (types) 'Number 10000) ", -1, 1};\n"
                    "Value* true = (Value *)&trueVal;\n"
                    "Number falseVal = {" (get (types) 'Number 10000) ", -1, 0};\n"
                    "Value* false = (Value *)&falseVal;\n"
                    "long long malloc_count = 0;\n"
                    "long long free_count = 0;\n"
                    "\n"

                    "int mask(int hash, int shift) {\n"
                    "  return (hash >> shift) & 0x1f;\n"
                    "}\n\n"

                    "int bitpos(int hash, int shift) {\n"
                    "  return 1 << mask(hash, shift);\n"
                    "}\n\n"

                    "void incRef(Value *v) {\n"
                    "  if (v == (Value *)0) {\n"
                    "    fprintf(stderr, \"why are you incRefing 'null'\\n\");\n "
                    "    abort();\n"
                    "  } else if (v->refs < -1) {\n"
                    "    fprintf(stderr, \"incRefing: %p\\n\", v);\n"
                    "    abort();\n"
                    "  } else if (v->refs >= 0)\n"
                    "    v->refs++;\n"
                    "  return;\n"
                    "}\n\n"

                    "void decRef(Value *v) {\n"
                    "  if (v == (Value *)0) {\n"
                    "    fprintf(stderr, \"why are you decRefing 'null'\\n\");\n "
                    "    abort();\n"
                    "  } else if (v->refs < -1) {\n"
                    "    fprintf(stderr, \"decRefing: %p\\n\", v);\n"
                    "  } else if (v->refs == -1) {\n"
                    "    return;\n"
                    "  } else if (v->refs == 0) {\n"
                    "    fprintf(stderr, \"decRef already at 0: %p\\n\", v);\n"
                    "    return;\n"
                    "  } else {\n"
                    "    v->refs--;\n"
                    "    return;\n"
                    "  }\n"
                    "}\n"

                    "Value *my_malloc(int64_t sz) {\n"
                    "  malloc_count++;\n"
                    "  Value *val = malloc(sz);\n"
                    "  if (sz > sizeof(Value))\n    val->refs = 1;\n"
                    "  return(val);\n"
                    "}\n\n"

                    "typedef struct DirectLL {int64_t type; struct DirectLL *next;} DirectLL;\n\n"

                    "DirectLL *freeSubStrings = (DirectLL *)0;\n"
                    "SubString *malloc_substring() {\n"
                    ;;"  return((SubString *)my_malloc(sizeof(SubString)));\n"
                    "  if (freeSubStrings == (DirectLL *)0) {\n"
                    "    malloc_count--;\n"
                    "    return((SubString *)my_malloc(sizeof(SubString)));\n"
                    "  } else {\n"
                    "    DirectLL *subStr = freeSubStrings;\n"
                    "    freeSubStrings = subStr->next;\n"
                    "    ((SubString *)subStr)->refs = 1;\n"
                    "    return((SubString *)subStr);\n"
                    "  }\n"
                    "}\n\n"

                    "int recycledReified = 0;\n"
                    "DirectLL *freeReified[20] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};\n"
                    "ReifiedVal *malloc_reified(int implCount) {\n"
                    ;; "  return((ReifiedVal *)my_malloc(sizeof(ReifiedVal) + sizeof(Function *) * implCount));\n"
                    "  if (implCount > 19 || freeReified[implCount] == (DirectLL *)0) {\n"
                    "    malloc_count--;\n"
                    "    return((ReifiedVal *)my_malloc(sizeof(ReifiedVal) + sizeof(Function *) * implCount));\n"
                    "  } else {\n"
                    "    recycledReified++;"
                    "    DirectLL *newReifiedVal = freeReified[implCount];\n"
                    "    freeReified[implCount] = newReifiedVal->next;\n"
                    "    ((ReifiedVal *)newReifiedVal)->refs = 1;\n"
                    "    return((ReifiedVal *)newReifiedVal);\n"
                    "  }\n"
                    "}\n\n"

                    "int recycledFunction = 0;\n"
                    "DirectLL *freeFunctions[10] = {0,0,0,0,0,0,0,0,0,0};\n"
                    "Function *malloc_function(int arityCount) {\n"
                    ;; "  return((Function *)my_malloc(sizeof(Function) + sizeof(FnArity *) * arityCount));\n"
                    "  if (arityCount > 9 || freeFunctions[arityCount] == (DirectLL *)0) {\n"
                    "    malloc_count--;\n"
                    "    return((Function *)my_malloc(sizeof(Function) + sizeof(FnArity *) * arityCount));\n"
                    "  } else {\n"
                    "    recycledFunction++;\n"
                    "    DirectLL *newFunction = freeFunctions[arityCount];\n"
                    "    freeFunctions[arityCount] = newFunction->next;\n"
                    "    ((Function *)newFunction)->refs = 1;\n"
                    "    return((Function *)newFunction);\n"
                    "  }\n"
                    "}\n\n"

                    "DirectLL *freeNumbers = (DirectLL *)0;\n"
                    "Number *malloc_number() {\n"
                    ;; "  return((Number *)my_malloc(sizeof(Number)));\n"
                    "  if (freeNumbers == (DirectLL *)0) {\n"
                    "    Number *numberStructs = (Number *)my_malloc(sizeof(Number) * 100);\n"
                    "    malloc_count--;"
                    "    for (int i = 99; i > 0; i--) {\n"
                    "      ((DirectLL *)&numberStructs[i])->next = freeNumbers;\n"
                    "      freeNumbers = (DirectLL *)&numberStructs[i];\n"
                    "    }\n"
                    "    return(numberStructs);\n"
                    "  } else {\n"
                    "    DirectLL *newNumber = freeNumbers;\n"
                    "    freeNumbers = newNumber->next;\n"
                    "    ((Number *)newNumber)->refs = 1;\n"
                    "    return((Number *)newNumber);\n"
                    "  }\n"
                    "}\n\n"

                    "DirectLL *freeLists = (DirectLL *)0;\n"
                    "List *malloc_list() {\n"
                    ;; "    return((List *)my_malloc(sizeof(List)));\n"
                    "  if (freeLists == (DirectLL *)0) {\n"
                    "    List *listStructs = (List *)my_malloc(sizeof(List) * 500);\n"
                    "    malloc_count--;\n"
                    "    for (int i = 499; i > 0; i--) {\n"
                    "      ((DirectLL *)&listStructs[i])->next = freeLists;\n"
                    "      freeLists = (DirectLL *)&listStructs[i];\n"
                    "    }\n"
                    "    return(listStructs);\n"
                    "  } else {\n"
                    "    DirectLL *newList = freeLists;\n"
                    "    freeLists = newList->next;\n"
                    "    ((List *)newList)->refs = 1;\n"
                    "    return((List *)newList);\n"
                    "  }\n"
                    "}\n\n"

                    "DirectLL *freeFnAritys = (DirectLL *)0;\n"
                    "FnArity *malloc_fnArity() {\n"
                    ;; "  return((FnArity *)my_malloc(sizeof(FnArity)));\n"
                    "  if (freeFnAritys == (DirectLL *)0) {\n"
                    "    malloc_count--;\n"
                    "    return((FnArity *)my_malloc(sizeof(FnArity)));\n"
                    "  } else {\n"
                    "    DirectLL *newFnArity = freeFnAritys;\n"
                    "    freeFnAritys = newFnArity->next;\n"
                    "    ((FnArity *)newFnArity)->refs = 1;\n"
                    "    return((FnArity *)newFnArity);\n"
                    "  }\n"
                    "}\n\n"

                    "DirectLL *freeBMINodes[20] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};\n"
                    "BitmapIndexedNode *malloc_bmiNode(int itemCount) {\n"
                    "  int nodeSize = sizeof(BitmapIndexedNode) + sizeof(Value *) * (itemCount * 2);\n"
                    "  BitmapIndexedNode *bmiNode;\n"
                    "  if (freeBMINodes[itemCount] == (DirectLL *)0) {\n"
                    "    malloc_count--;\n"
                    "    bmiNode = (BitmapIndexedNode *)my_malloc(nodeSize);\n"
                    "  } else {\n"
                    "    bmiNode = (BitmapIndexedNode *)freeBMINodes[itemCount];\n"
                    "    freeBMINodes[itemCount] = ((DirectLL *)bmiNode)->next;\n"
                    "  }\n"
                    "  memset(bmiNode, 0, nodeSize);\n"
                    "  bmiNode->type = BitmapIndexedType;\n"
                    "  bmiNode->refs = 1;\n"
                    "  return(bmiNode);\n"
                    "}\n\n"

                    "DirectLL *freeArrayNodes = (DirectLL *)0;\n"
                    "ArrayNode *malloc_arrayNode() {\n"
                    "  ArrayNode *arrayNode;\n"
                    "  if (freeArrayNodes == (DirectLL *)0) {\n"
                    "    malloc_count--;\n"
                    "    arrayNode = (ArrayNode *)my_malloc(sizeof(ArrayNode));\n"
                    "  } else {\n"
                    "    arrayNode = (ArrayNode *)freeArrayNodes;\n"
                    "    freeArrayNodes = ((DirectLL *)arrayNode)->next;\n"
                    "  }\n"
                    "  memset(arrayNode, 0, sizeof(ArrayNode));\n"
                    "  arrayNode->type = ArrayNodeType;\n"
                    "  arrayNode->refs = 1;\n"
                    "  return(arrayNode);"
                    "}\n\n"

                    "void my_free(Value *v) {\n"
                    "  if (v == (Value *)0) {\n"
                    "    fprintf(stderr, \"why are you freeing 'null'\\n\");\n "
                    "    abort();\n"
                    "  } else if (v->refs == -10) {\n"
                    "    fprintf(stderr, \"freeing already freed struct\\n\");\n"
                    "    abort();\n"
                    "  } else if (v->refs > 0 || v->refs == -1) {\n"
                    "    return;\n"
                    "  } else if (v->type == 0) {\n"
                    "    fprintf(stderr, \"freeing invalid type\\n\");\n"
                    "    abort();\n"
                    "  } else if (v->type == StringType) {\n"
                    "    v->refs = -10;\n"
                    "    free_count++;\n"
                    "    free(v);\n"
                    "  } else if (v->type == NumberType) {\n"
                    "    v->refs = -10;\n"
                    "    ((DirectLL *)v)->next = freeNumbers;\n"
                    "    freeNumbers = (DirectLL *)v;\n"
                    ;; "    free_count++;\n"
                    ;; "    free(v);\n"
                    "  } else if (v->type == FunctionType) {\n"
                    "    Function *f = (Function *)v;\n"
                    "    for (int i = 0; i < f->arityCount; i++) {\n"
                    "      decRef((Value *)f->arities[i]);\n"
                    "      my_free((Value *)f->arities[i]);\n"
                    "    }\n"
                    "    v->refs = -10;\n"
                    "    if (f->arityCount < 10) {\n"
                    "      DirectLL *freedList = freeFunctions[f->arityCount];\n"
                    "      freeFunctions[f->arityCount] = (DirectLL *)v;\n"
                    "      ((DirectLL *)v)->next = freedList;\n"
                    "    } else {\n"
                    "      free_count++;\n"
                    "      free(v);\n"
                    "    }"
                    "  } else if (v->type == ListType) {\n"
                    "    Value *head = ((List *)v)->head;\n"
                    "    List *tail = ((List *)v)->tail;\n"
                    "    v->refs = -10;\n"
                    "    if (head != (Value *)0) {\n"
                    "      decRef(head);\n"
                    "      my_free(head);\n"
                    "    }\n"
                    "    if (tail != (List *)0) {\n"
                    "      decRef((Value *)tail);\n"
                    "      my_free((Value *)tail);\n"
                    "    }\n"
                    "    ((DirectLL *)v)->next = freeLists;\n"
                    "    freeLists = (DirectLL *)v;\n"
                    ;; "    free_count++;\n"
                    ;; "    free(v);\n"
                    "  } else if (v->type == KeywordType ||\n"
                    "             v->type == SubStringType ||\n"
                    "             v->type == SymbolType) {\n"
                    "    Value *src = ((SubString *)v)->source;\n"
                    "    v->refs = -10;\n"
                    "    if (src != (Value *)0) {\n"
                    "      decRef(src);\n"
                    "      my_free(src);\n"
                    "    }\n"
                    "    ((DirectLL *)v)->next = freeSubStrings;\n"
                    "    freeSubStrings = (DirectLL *)v;\n"
                    ;; "    free_count++;\n"
                    ;; "    free(v);\n"
                    "  } else if (v->type == " (get (types) 'FnArity 10000) ") {\n"
                    "    FnArity *arity = (FnArity *)v;\n"
                    "    decRef((Value *)arity->closures);\n"
                    "    my_free((Value *)arity->closures);\n"
                    "    v->refs = -10;\n"
                    "    ((DirectLL *)v)->next = freeFnAritys;\n"
                    "    freeFnAritys = (DirectLL *)v;\n"
                    ;; "    free_count++;\n"
                    ;; "    free(v);\n"
                    "  } else if (v->type == OpaqueType) {\n"
                    "    v->refs = -10;\n"
                    "  } else if (v->type == BitmapIndexedType) {\n"
                    "    // fprintf(stderr, \"%p free bmi node\\n\", v);\n"
                    "    BitmapIndexedNode *node = (BitmapIndexedNode *)v;\n"
                    "    int cnt = __builtin_popcount(node->bitmap);\n"
                    "    for (int i = 0; i < (2 * cnt); i++) {\n"
                    "       if (node->array[i] != (Value *)0) {\n"
                    "          decRef(node->array[i]);\n"
                    "          my_free(node->array[i]);\n"
                    "       }\n"
                    "    }\n"
                    "    v->refs = -10;\n"
                    "    ((DirectLL *)v)->next = freeBMINodes[cnt];\n"
                    "    freeBMINodes[cnt] = (DirectLL *)v;\n"
                    ;; "    free_count++;\n"
                    ;; "    free(v);\n"
                    "  } else if (v->type == ArrayNodeType) {\n"
                    "    ArrayNode *node = (ArrayNode *)v;\n"
                    "    for (int i = 0; i < 32; i++) {\n"
                    "       if (node->array[i] != (Value *)0) {\n"
                    "          decRef(node->array[i]);\n"
                    "          my_free(node->array[i]);\n"
                    "       }\n"
                    "    }\n"
                    "    v->refs = -10;\n"
                    "    ((DirectLL *)v)->next = freeArrayNodes;\n"
                    "    freeArrayNodes = (DirectLL *)v;\n"
                    ;; "    free_count++;\n"
                    ;; "    free(v);\n"
                    "  } else {\n"
                    "    ReifiedVal *rv = (ReifiedVal *)v;\n"
                    "    for (int i = 0; i < rv->implCount; i++) {\n"
                    "      decRef(rv->impls[i]);\n"
                    "      my_free(rv->impls[i]);\n"
                    "    }\n"
                    "    v->refs = -10;\n"
                    "    if (rv->implCount < 20) {\n"
                    "      DirectLL *freedList = freeReified[rv->implCount];\n"
                    "      freeReified[rv->implCount] = (DirectLL *)v;\n"
                    "      ((DirectLL *)v)->next = freedList;\n"
                    "    } else {\n"
                    "      free_count++;\n"
                    "      free(v);\n"
                    "    }"
                    "  }\n"
                    "  // fprintf(stderr, \"malloc_count: %lld free_count: %lld\\r\", malloc_count, free_count);\n"
                    "};\n"

                    ;; this fn only gets called while printing a
                    ;; message before aborting.
                    "char *extractStr(Value *v) {\n"
                    "String *newStr = (String *)my_malloc(sizeof(String) + ((String *)v)->len + 5);\n"
                    "if (v->type == StringType)\n"
                    "snprintf(newStr->buffer, ((String *)v)->len + 1, \"%s\", ((String *)v)->buffer);\n"
                    "else if (v->type == SubStringType)\n"
                    "snprintf(newStr->buffer, ((String *)v)->len + 1, \"%s\", ((SubString *)v)->buffer);\n"
                    "else {\n"
                    "fprintf(stderr, \"\\ninvalid type for 'extractStr'\\n\");\n"
                    "abort();\n"
                    "}\n"
                    "return(newStr->buffer);\n}\n\n"

                    "int isTrue(Value *boolVal) {\n"
                    "if (boolVal->type != " (get (types) 'Number 10000) ") {\n"
                    "fprintf(outStream, \"Invalid boolean value\\n"
                    "\");\nabort();\n}\nelse\nreturn(((Number *)boolVal)->numVal);\n}\n"
                    "\n"

                    "Value *findProtoImpl(int64_t type, ProtoImpls *impls) {\n"
                    "int64_t implIndex = 0;\n"
                    "while(implIndex < impls->implCount) {\n"
                    "if (type != impls->impls[implIndex].type) {\n"
                    "implIndex++;\n"
                    "} else\n"
                    "return(impls->impls[implIndex].implFn);\n"
                    "}\n"
                    "return(impls->defaultImpl);\n"
                    "};\n\n"

                    "FnArity *findFnArity(Value *fnVal, int argCount) {\n"
                    "Function *fn = (Function *)fnVal;\n"
                    "int arityIndex = 0;\n"
                    "FnArity *arity = (FnArity *)fn->arities[arityIndex];\n"
                    "FnArity *variadic = (FnArity *)0;\n"
                    "while(arityIndex < fn->arityCount) {\n"
                    "arity = (FnArity *)fn->arities[arityIndex];\n"
                    "if (arity->variadic) {\n"
                    "variadic = arity;\n"
                    "arityIndex++;\n"
                    "} else if (arity->count != argCount) {\n"
                    "arityIndex++;\n"
                    "} else\n"
                    "return(arity);\n"
                    "}\n"
                    "return(variadic);\n"
                    "};\n\n"
                    "\n"

                    "Value *stringValue(char *s) {\n"
                    "int64_t len = strlen(s);\n"
                    "String *strVal = (String *)my_malloc(sizeof(String) + len + 4);\n"
                    "strVal->type = StringType;\n"
                    "strVal->len = strlen(s);\n"
                    "strncpy(strVal->buffer, s, len);\n"
                    "return((Value *)strVal);\n"
                    "};\n"
                    "\n"

                    "Value *symbolValue(char *s) {\n"
                    "SubString *sym = malloc_substring();\n"
                    "sym->type = SymbolType;\n"
                    "sym->buffer = s;\n"
                    "sym->len = strlen(s);\n"
                    "sym->source = (Value *)0;\n"
                    "return((Value *)sym);\n"
                    "};\n"
                    "\n"

                    "Value *keywordValue(char *s) {\n"
                    "SubString *kw = malloc_substring();\n"
                    "kw->type = KeywordType;\n"
                    "kw->buffer = s;\n"
                    "kw->len = strlen(s);\n"
                    "kw->source = (Value *)0;\n"
                    "return((Value *)kw);\n"
                    "};\n"
                    "\n"

                    "Value *makeSubstr(int64_t len, Value *str, char *subsStart) {\n"
                    "SubString *subStr = malloc_substring();\n"
                    "subStr->type = SubStringType;\n"
                    "subStr->len = len;\n"
                    "subStr->source = str;\n"
                    "incRef(str);\n"
                    "subStr->buffer = subsStart;\n"
                    "return((Value *)subStr);}\n"
                    "\n"

                    "Value *numberValue(int64_t n) {\n"
                    "Number *numVal = malloc_number();\n"
                    "numVal->type = NumberType;\n"
                    "numVal->numVal = n;\n"
                    "return((Value *)numVal);\n"
                    "};\n"
                    "\n"

                    "List *listCons(Value *x, List *l) {\n"
                    "  if (l->type != ListType) {\n"
                    "    fprintf(stderr, \"'cons' requires a list\\n\");\n"
                    "    abort();\n"
                    "  }\n"
                    "  List *newList = malloc_list();\n"
                    "  newList->type = ListType;\n"
                    "  newList->len = l->len + 1;\n"
                    "  newList->head = (Value *)x;\n"
                    "  newList->tail = l;\n"
                    "  return(newList);\n"
                    "};\n")))

(defn emit-impl [default impls]
  (let [default-sym (cond
                     (= default :no-default) "(Value *)0"
                     default)
        impls-strs (map impls (fn [impl]
                                (let [type-num (first impl)
                                      fn-sym (:fn-sym (second impl))]
                                  (str "{" type-num ", " fn-sym "}"))))]
    (apply-to list
              (write-strs (list "{" (count impls-strs) ", " default-sym ", {"))
              (write-strs (interpose impls-strs ", "))
              (write "}};\n"))))

(defn finalize-protocols []
  (for [protocols (sm/get-val :protocols {})
        result (cond
                (empty? protocols) (sm/state-maybe "")
                (traverse (seq protocols)
                          (fn [proto]
                            (let [proto-impls (nth proto 1 {})
                                  impls-sym (get proto-impls :impls-sym "")
                                  impls (get proto-impls :impls {})
                                  default (get-in impls (list :default :fn-sym) :no-default)
                                  impls (filter (seq impls)
                                                (fn [impl]
                                                  (let [type (first impl)]
                                                    (cond
                                                     (= type :default) false
                                                     (= type :no-type) false
                                                     true))))
                                  local-sym (gensym "localImpls_")]
                              (for [_ (write-strs (list "extern ProtoImpls *" impls-sym ";\n"))
                                    _ (write-strs (list "ProtoImpls " local-sym " = "))
                                    _ (emit-impl default impls)]
                                (list impls-sym local-sym))))))]
    result))

(defn emit-main []
  (for [_ (sm/set-val :local-sym-count 0)
        main-sym (sm/get-val :main-sym :no-main)
        :when (not (= :no-main main-sym))
        proto-syms (finalize-protocols)
        _ (write-strs (list "\nint main(int argc, char *argv[]) {\n"))
        _ (traverse proto-syms
                    (fn [proto-sym]
                      (let [impls-sym (nth proto-sym 0 "")
                            local-sym (nth proto-sym 1 "")]
                        (write-strs (list "  " impls-sym " = &" local-sym ";\n")))))
        _ (write-strs (list "     outStream = stdout;\n"
                            "     List *argList = malloc_list();\n"
                            "      argList->type = ListType;\n"
                            "      argList->len = 0;\n"
                            "      argList->head = (Value *)0;\n"
                            "      argList->tail = (List *)0;\n"
                            "      List *tail = argList;\n"
                            "      for(int i = 0; i < argc; i++) {\n"
                            "         List *newTail = malloc_list();\n"
                            "         newTail->type = ListType;\n"
                            "         newTail->len = 0;\n"
                            "         newTail->tail = (List *)0;\n"
                            "         newTail->head = (Value *)0;\n"
                            "         tail->head = stringValue(argv[i]);\n"
                            "         tail->tail = newTail;\n"
                            "         tail = newTail;\n"
                            "         argList->len++;\n}\n"))
        _ (write-strs (list "  int the_final_answer = " main-sym "((Value *)argList);\n"
                            "  decRef((Value *)argList);\n"
                            "  my_free((Value *)argList);\n"
                            "  fprintf(stderr, \"malloc count: %lld  free count: %lld  diff: %lld\\n\""
                            ", malloc_count, free_count, malloc_count - free_count);\n"
                            "  return(the_final_answer);\n};\n"))]
    ""))

(defn protocols []
  (inline-text "return(protocols());"))

(defn load-protocols []
  (let [protos (protocols)
        protos (map protos
                    (fn [proto-info]
                      (let [proto-name (nth proto-info 0)
                            impls-sym (nth proto-info 1)
                            extern-def (nth proto-info 2)
                            impls (reduce (nth proto-info 3)
                                          {}
                                          (fn [m kv]
                                            (let [type-num (first kv)
                                                  fn-sym (second kv)]
                                              (assoc m type-num {:fn-sym fn-sym}))))
                            name (nth proto-info 4)]
                        (list proto-name {:impls-sym impls-sym
                                          :name name
                                          :extern-def extern-def
                                          :impls impls}))))
        proto-map (reduce (map protos
                               (fn [proto]
                                 (let [qualified-name (first proto)
                                       name (:name (second proto))]
                                   (list name qualified-name))))
                          {}
                          (fn [m kv]
                            (apply assoc m kv)))]
    (apply-to list
              (sm/set-val :protocols (reduce protos
                                             {}
                                             (fn [m kv]
                                               (apply assoc m kv))))
              (sm/assoc-in-val (list :modules "core" :protos) proto-map)
              (sm/set-val :defined-protos proto-map)
              (traverse protos
                        (fn [proto]
                          (let [impls (get (second proto) :impls {})]
                            (cond
                             (empty? impls) (sm/state-maybe "")
                             (traverse (seq impls)
                                       (fn [impl]
                                         (write-strs (list "extern Function "
                                                           (subs (:fn-sym (second impl)) 10) ";\n")))))))))))

(defn serialize-protocols []
  (for [protos (sm/get-val :protocols {})
        _ (write "Value *protocols() {\n")
        _ (write "List *protos = empty_list;\n")
        _ (write "List *protoInfo;\n")
        _ (write "List *impls;\n")
        _ (write "List *impl;\n")
        _ (write-strs (flat-map (seq protos)
                                (fn [proto-inf]
                                  (let [impls-info (nth proto-inf 1 empty-list)
                                        impl-fn-name (get impls-info :name "")
                                        impls-sym (get impls-info :impls-sym "")
                                        extern-def (get impls-info :extern-def "")
                                        impls (seq (get impls-info :impls empty-list))]
                                    (comp (list "protoInfo = empty_list;\n"
                                                "impls = empty_list;\n")
                                          (map (seq impls)
                                               (fn [impl]
                                                 (let [impl-type (nth impl 0 0)]
                                                   (str "impl = empty_list;\n"
                                                        "impl = listCons(stringValue(\""
                                                        (:fn-sym (nth impl 1 ""))
                                                        "\"), impl);\n"
                                                        "impl = listCons("
                                                        (cond
                                                         (= :default impl-type)
                                                         "keywordValue(\":default\")"

                                                         (str "numberValue(" impl-type ")"))
                                                        ", impl);\n"
                                                        "impls = listCons((Value *)impl, impls);\n"))))
                                          (list "protoInfo = listCons(symbolValue(\"" impl-fn-name
                                                             "\"), protoInfo);\n"
                                                "protoInfo = listCons((Value *)impls, protoInfo);\n"
                                                "protoInfo = listCons(stringValue(\"" extern-def "\"), protoInfo);\n"
                                                "protoInfo = listCons(stringValue(\"" impls-sym "\"), protoInfo);\n"
                                                "protoInfo = listCons(stringValue(\"" (first proto-inf)
                                                "\"), protoInfo);\n"
                                                "protos = listCons((Value *)protoInfo, protos);\n"))))))
        _ (write "return((Value *)protos);\n")
        _ (write "}\n\n")]
    ""))

(defn static-fns []
  (inline-text "return(static_fns());"))

(defn load-static-fns []
  (let [s-funs (static-fns)
        s-funs (map s-funs
                    (fn [fn-info]
                      (let [fn-name (first fn-info)
                            arities (second fn-info)]
                        (list fn-name (reduce arities
                                              {}
                                              (fn [arities arity]
                                                (let [arg-count (nth arity 0)
                                                      fn-sym (nth arity 1)
                                                      return-type (nth arity 2 :no-type)]
                                                  (assoc arities arg-count {:return-type return-type
                                                                            :fn-sym fn-sym}))))))))]
    (sm/set-val :core-static-fns (reduce s-funs
                                         {}
                                         (fn [s-funs s-fun]
                                           (apply assoc s-funs s-fun))))))

(defn serialize-static-fns []
  (for [s-fns (sm/get-val :static-fns {})
        _ (write "Value *static_fns() {\n")
        _ (write "List *staticFns = empty_list;\n")
        _ (write "List *fnInfo;\n")
        _ (write "List *arityInfo;\n")
        _ (write-strs (flat-map (seq s-fns)
                                (fn [static-fn]
                                  (let [name (first static-fn)
                                        arities (second static-fn)]
                                    (comp
                                     (list "fnInfo = empty_list;\n")
                                     (flat-map (seq arities)
                                               (fn [arity]
                                                 (let [arg-count (first arity)
                                                       arity-sym (get (second arity) :fn-sym "")
                                                       return-type (get (second arity) :return-type :no-type)]
                                                   (comp
                                                    (list "arityInfo = listCons("
                                                          (cond
                                                           (= :no-type return-type) "keywordValue(\":no-type\""
                                                           (str "numberValue(" return-type))
                                                          "), empty_list);\n")
                                                    (list "arityInfo = listCons(stringValue(\"" arity-sym
                                                          "\"), arityInfo);\n")
                                                    (cond
                                                     (= :variadic arg-count)
                                                     (list "arityInfo = listCons(keywordValue(\":variadic\")"
                                                           ", arityInfo);\n")

                                                     (list "arityInfo = listCons(numberValue(" arg-count
                                                           "), arityInfo);\n"))
                                                    (list "fnInfo = listCons((Value *)arityInfo, fnInfo);\n")))))
                                     (list "fnInfo = listCons((Value *)fnInfo, empty_list);\n"
                                           "fnInfo = listCons(stringValue(\"" name "\"), fnInfo);\n"
                                           "staticFns = listCons((Value *)fnInfo, staticFns);\n"))))))
        _ (write "return((Value *)staticFns);\n")
        _ (write "}\n\n")]
    ""))

(defn defined-syms []
  (inline-text "return(defined_syms());"))

(defn load-defined-syms []
  (let [defined (reduce (defined-syms)
                        {}
                        (fn [m kv]
                          (let [k (first kv)
                                v (second kv)
                                ext (nth v 0)
                                ref (nth v 1)
                                type-num (nth v 2 :no-type)]
                            (assoc m k (list ext (c-code ref empty-list "" type-num))))))]
    (sm/set-val :core-defined-syms defined)))

(defn serialize-defined-syms []
  (for [def-syms (sm/get-val :defined-syms {})
        _ (write "Value *defined_syms() {\n")
        _ (write "List *defSyms = empty_list;\n")
        _ (write "List *symInfo;\n")
        _ (write-strs (flat-map (seq def-syms)
                                (fn [def]
                                  (let [sym (first def)
                                        ext-ref (second def)
                                        ext (first ext-ref)
                                        ref (.c-val (second ext-ref))
                                        type-num (.type-num (second ext-ref))]
                                    (list
                                     "symInfo = listCons("
                                     (cond
                                      (= :no-type type-num) "keywordValue(\":no-type\""
                                      (str "numberValue(" type-num))
                                     "), empty_list);\n"
                                     "symInfo = listCons(stringValue(\"" ref "\"), symInfo);\n"
                                     "symInfo = listCons(stringValue(\"" ext "\"), symInfo);\n"
                                     "symInfo = listCons((Value *)symInfo, empty_list);\n"
                                     "symInfo = listCons(symbolValue(\"" sym "\"), symInfo);\n"
                                     "defSyms = listCons((Value *)symInfo, defSyms);\n")))))
        _ (write "return((Value *)defSyms);\n")
        _ (write "}\n\n")]
    ""))

(defn number-literals []
  (inline-text "return(number_literals());"))

(defn load-number-literals []
  (let [nums (reduce (number-literals)
                     {}
                     (fn [m kv]
                       (apply assoc m kv)))]
    (apply-to list
              (sm/set-val :num-count (inc (count nums)))
              (sm/set-val :core-numbers nums))))

(defn serialize-number-literals []
  (for [nums (sm/get-val :numbers {})
        _ (write "Value *number_literals() {\n")
        _ (write "List *nums = empty_list;\n")
        _ (write "List *numInfo;\n")
        _ (write-strs (flat-map (seq nums)
                                (fn [num-lit]
                                  (let [num (first num-lit)
                                        ref (second num-lit)]
                                    (list "numInfo = listCons(stringValue(\"" ref "\"), empty_list);\n"
                                          "numInfo = listCons(numberValue(" num "), numInfo);\n"
                                          "nums = listCons((Value *)numInfo, nums);\n")))))
        _ (write "return((Value *)nums);\n")
        _ (write "}\n\n")]
    ""))

(defn string-literals []
  (inline-text "return(string_literals());\n"))

(defn load-string-literals []
  (let [strs (reduce (string-literals)
                     {}
                     (fn [m kv]
                       (apply assoc m kv)))]
    (apply-to list
              (sm/set-val :str-count (count strs))
              (sm/set-val :core-strings strs))))

(defn serialize-string-literals []
  (for [strs (sm/get-val :strings {})
        _ (write "Value *string_literals() {\n")
        _ (write "List *strs = empty_list;\n")
        _ (write "List *strInfo;\n")
        _ (write-strs (flat-map (seq strs)
                                (fn [str-lit]
                                  (let [str-val (first str-lit)
                                        ref (second str-lit)]
                                    (list "strInfo = listCons(stringValue(\"" ref "\"), empty_list);\n"
                                          "strInfo = listCons(stringValue(\"" (escape-chars str-val)
                                          "\"), strInfo);\n"
                                          "strs = listCons((Value *)strInfo, strs);\n")))))
        _ (write "return((Value *)strs);\n")
        _ (write "}\n\n")]
    ""))

(defn keyword-literals []
  (inline-text "return(keyword_literals());\n"))

(defn load-keyword-literals []
  (let [kws (reduce (keyword-literals)
                     {}
                     (fn [m kv]
                       (apply assoc m kv)))]
    (apply-to list
              (sm/set-val :kw-count (count kws))
              (sm/set-val :core-keywords kws))))

(defn serialize-keyword-literals []
  (for [kws (sm/get-val :keywords {})
        _ (write "Value *keyword_literals() {\n")
        _ (write "List *kws = empty_list;\n")
        _ (write "List *kwInfo;\n")
        _ (write-strs (flat-map (seq kws)
                                (fn [kw-lit]
                                  (let [kw (first kw-lit)
                                        ref (second kw-lit)]
                                    (list
                                     "kwInfo = listCons(stringValue(\"" ref "\"), empty_list);\n"
                                     "kwInfo = listCons(keywordValue(\"" kw "\"), kwInfo);\n"
                                     "kws = listCons((Value *)kwInfo, kws);\n")))))
        _ (write "return((Value *)kws);\n")
        _ (write "}\n\n")]
    ""))

(defn symbol-literals []
  (inline-text "return(symbol_literals());\n"))

(defn load-symbol-literals []
  (let [syms (reduce (symbol-literals)
                     {}
                     (fn [m kv]
                       (apply assoc m kv)))]
    (apply-to list
              (sm/set-val :sym-count (count syms))
              (sm/set-val :core-symbols syms))))

(defn serialize-symbol-literals []
  (for [syms (sm/get-val :symbols {})
        _ (write "Value *symbol_literals() {\n")
        _ (write "List *syms = empty_list;\n")
        _ (write "List *symInfo;\n")
        _ (write-strs (flat-map (seq syms)
                                (fn [sym-lit]
                                  (let [sym (first sym-lit)
                                        ref (second sym-lit)]
                                    (list
                                     "symInfo = listCons(stringValue(\"" ref "\"), empty_list);\n"
                                     "symInfo = listCons(symbolValue(\"" sym "\"), symInfo);\n"
                                     "syms = listCons((Value *)symInfo, syms);\n")))))
        _ (write "return((Value *)syms);\n")
        _ (write "}\n\n")]
    ""))

(defn counts []
  (inline-text "return(counts());\n"))

(defn load-counts []
  (sm/new-sm
   (fn [s]
     (list (set-sym-count (nth (counts) 0 0)) s))))

(defn serialize-counts []
  (for [_ (write "\nValue *counts() {\n")
        _ (write "List *cnts = empty_list;\n")
        :let [gensym-count (get-sym-count)]
        _ (write-strs (list "cnts = listCons(numberValue(" gensym-count "), cnts);\n"))
        _ (write "return((Value *)cnts);\n")
        _ (write "}\n\n")]
    ""))

(defn types* []
  (inline-text "return(types());\n"))

(defn load-types []
  (let [types (reduce (types*)
                     {}
                     (fn [m kv]
                       (apply assoc m kv)))]
    (sm/set-val :types types)))

(defn serialize-types []
  (for [types (sm/get-val :types {})
        _ (write "Value *types() {\n")
        _ (write "List *types = empty_list;\n")
        _ (write "List *typeInfo;\n")
        _ (write-strs (flat-map (seq types)
                                (fn [type]
                                  (let [type-sym (first type)
                                        type-num (second type)]
                                    (list
                                     "typeInfo = listCons(numberValue(" type-num "), empty_list);\n"
                                     "typeInfo = listCons(symbolValue(\"" type-sym "\"), typeInfo);\n"
                                     "types = listCons((Value *)typeInfo, types);\n")))))
        _ (write "return((Value *)types);\n")
        _ (write "}\n\n")]
    ""))

(defn compile-source [parser]
  (flat-map (sm/set-val :parser parser)
            (fn [_]
              (sm/recur (for [expr parser
                              ast (an/analyze-expr expr)
                              emitted (fr/evaluate ast emit-c)
                              _ (write-strs (.init emitted))]
                          "")))))

(defn compile-core [parser text]
  (apply-to list
            (sm/set-val :text text)
            (sm/assoc-in-val (list :new-numbers)
                             (reduce (seq (types)) {}
                                     (fn [m type]
                                       (assoc m
                                         (nth type 1 0)
                                         (str "_num_" (nth type 1 0))))))
            (apply-to list
                      (base-types)
                      (extern-functions)
                      (fixed-fn-types)
                      (let [types (types)]
                        (write-strs
                         (list
                          "const int64_t NumberType = " (get types 'Number 0) ";\n"
                          "const int64_t KeywordType = " (get types 'Keyword 0) ";\n"
                          "const int64_t SymbolType = " (get types 'Symbol 0) ";\n"
                          "const int64_t StringType = " (get types 'String 0) ";\n"
                          "const int64_t SubStringType = " (get types 'SubStr 0) ";\n"
                          "const int64_t ListType = " (get types 'List 0) ";\n"
                          "const int64_t FunctionType = " (get types 'Function 0) ";\n"
                          "const int64_t OpaqueType = " (get types 'Opaque 0) ";\n"
                          "const int64_t BitmapIndexedType = " (get types 'BitmapIndexedNode  0) ";\n"
                          "const int64_t ArrayNodeType = " (get types 'ArrayNode  0) ";\n"
                          "List *empty_list = &(List){4,-1,0,0,0};\n")))
                      (base-fns)
                      (emit-proto-fn "Getter/"
                                       (list 'type-name (list (list 1 {}))))
                      (emit-proto-fn "Function/"
                                     (list 'invoke (map (range 8)
                                                        (fn [num-args]
                                                          (list (inc num-args) {})))))
                      (for [expr (sm/get-val :expr)
                            type-names (traverse
                                        (seq (types))
                                        (fn [type]
                                          (let [type-name (str (first type))
                                                type-num (second type)
                                                impl-ast (fr/free
                                                          (ast/fn-ast
                                                           "type-name_impl"
                                                           (list
                                                            (fr/free
                                                             (ast/fn-arity-ast
                                                              (list '_)
                                                              (apply* (fr/free list)
                                                                      (list (fr/free
                                                                             (ast/const-string-ast type-name)))))))))]
                                            (for [_ (sm/set-val :expr type-name)
                                                  _ (an/analyze-string)
                                                  _ (emit-extension type-num (list 'Getter (list (list 'type-name
                                                                                                       impl-ast))))]
                                              ""))))

                            _ (sm/set-val :expr expr)]
                        ""))
            (compile-source parser)
            (for [get-sym (lookup-sym* 'get*)
                  get-fn-sym (lookup-static-fn (.c-val get-sym) 5)
                  _ (write-strs
                     (list "Value *get(Value *node, Value *key, Value *val, Value *hash, Value *shift) {\n"
                           "  return(" get-fn-sym "((List *)0, node, key, val, hash, shift));\n"
                           "}\n"))]
              "")
            (for [assoc-sym (lookup-sym* 'assoc*)
                  assoc-fn-sym (lookup-static-fn (.c-val assoc-sym) 5)
                  _ (write-strs
                     (list "Value *assoc(Value *node, Value *key, Value *val, Value *hash, Value *shift) {\n"
                           "  return(" assoc-fn-sym "((List *)0, node, key, val, hash, shift));\n"
                           "}\n"))]
              "")
            (for [equals-sym (lookup-sym* '=*)
                  equals-fn-sym (lookup-static-fn (.c-val equals-sym) 2)
                  _ (write-strs
                     (list "Value *valsEqual(List *x, Value *v1, Value *v2) {\n"
                           "  return(" equals-fn-sym "(x, v1, v2));\n"
                           "}\n"))]
              "")
            (for [sha1-sym (lookup-sym* 'sha1)
                  sha1-fn-sym (lookup-static-fn (.c-val sha1-sym) 1)
                  _ (write-strs
                     (list "Value *sha1(Value *v) {\n"
                           "  return(" sha1-fn-sym "((List *)0, v));\n"
                           "}\n"))]
              "")
            (for [hash-seq-sym (lookup-sym* 'hash-seq)
                  hash-seq-fn-sym (lookup-static-fn (.c-val hash-seq-sym) 2)
                  _ (write-strs
                     (list "Value *hashSeq(Value *n, Value *s) {\n"
                           "  return(" hash-seq-fn-sym "((List *)0, n, s));\n"
                           "}\n"))]
              "")
            (for [count-sym (lookup-sym* 'count)
                  count-fn-sym (lookup-static-fn (.c-val count-sym) 1)
                  _ (write-strs
                     (list "Value *count(Value *n) {\n"
                           "  return(" count-fn-sym "((List *)0, n));\n"
                           "}\n"))]
              "")
            (serialize-symbol-literals)
            (serialize-number-literals)
            (serialize-string-literals)
            (serialize-keyword-literals)
            (serialize-protocols)
            (serialize-static-fns)
            (serialize-defined-syms)
            (serialize-types)
            (serialize-counts)))

(defn analyze-toccata-core []
  (for [expr (an/is-expr (fn [x]
                        (cond
                         (not (seq? x)) false
                         (< (count x) 2) false
                         (= (first x) 'toccata-core))))]
    (fr/free (reify
               Emitter
               (emit-c [_]
                 (for [text (sm/get-val :text)
                       parser (sm/get-val :parser)
                       file-name (sm/get-val :file-name)
                       _ (sm/set-val :file-name "core")
                       :let [out-file (str (subs (second expr) 0 (- (count (second expr)) 3)) "c")
                             _ (output-to-file out-file)
                             core (fio/file-stream (fio/fopen-read (second expr)))]
                       _ (compile-core parser core)
                       :let [_ (fio/close-stream core)
                             _ (standard-output)]

                       syms (sm/get-val :symbols {})
                       _ (sm/set-val :core-symbols syms)
                       _ (sm/set-val :symbols {})

                       kws (sm/get-val :keywords {})
                       _ (sm/set-val :core-keywords kws)
                       _ (sm/set-val :keywords {})

                       strs (sm/get-val :strings {})
                       _ (sm/set-val :core-strings strs)
                       _ (sm/set-val :strings {})

                       nums (sm/get-val :numbers {})
                       _ (sm/set-val :core-numbers nums)
                       _ (sm/set-val :numbers {})

                       def-syms (sm/get-val :defined-syms {})
                       _ (sm/set-val :core-defined-syms def-syms)
                       _ (sm/set-val :defined-syms {})

                       s-funs (sm/get-val :static-fns {})
                       _ (sm/set-val :core-static-fns s-funs)
                       _ (sm/set-val :static-fns {})

                       _ (base-types)

                       protos (sm/get-val :protocols)
                       _ (traverse (seq protos)
                                   (fn [proto]
                                     (let [impls (get (second proto) :impls {})]
                                       (cond
                                        (empty? impls) (sm/state-maybe "")
                                        (traverse (seq impls)
                                                  (fn [impl]
                                                    (write-strs (list "extern Function "
                                                                      (subs (:fn-sym (second impl)) 10)
                                                                      ";\n"))))))))

                       _ (extern-functions)
                       _ (core-base-fns)
                       _ (fixed-fn-types)

                       type-name-sym (lookup-sym* 'type-name)
                       type-name-arity-sym (lookup-static-fn (.c-val type-name-sym) 1)
                       _ (write-strs (list "Value *"
                                           type-name-arity-sym
                                           "(List *closures, Value *arg0);\n"))

                       _ (sm/set-val :file-name file-name)
                       _ (sm/set-val :text text)]
                   (c-code "" empty-list "" :no-type)))))))

(defn compile-compiler [parser text]
  (apply-to list
            (sm/set-val :text text)
            (for [expr parser
                  _ (an/set-expr expr)
                  _ (sm/set-val :parser parser)
                  ast (analyze-toccata-core)
                  _ (fr/evaluate ast emit-c)
                  _ (compile-source parser)]
              "")
            (emit-main)))

(defn compile-main [parser text]
  (apply-to list
            (sm/set-val :text text)
            (base-types)
            (extern-functions)
            (core-base-fns)
            (fixed-fn-types)
            (load-counts)
            (load-symbol-literals)
            (load-keyword-literals)
            (load-string-literals)
            (load-number-literals)
            (load-defined-syms)
            (load-protocols)
            (load-static-fns)
            (load-types)
            (for [type-name-sym (lookup-sym* 'type-name)
                  type-name-arity-sym (lookup-static-fn (.c-val type-name-sym) 1)
                  _ (write-strs (list "Value *" type-name-arity-sym "(List *closures, Value *arg0);\n"))]
              "")
            (compile-source parser)
            (emit-main)))

(defn compile-module [src-files]
  (let [p (fr/evaluate (grmr/read-form) parser/recursive-descent)
        parser (flat-map p (fn [v]
                             (cond
                              (empty? v) empty-list
                              (sm/state-maybe (first v)))))
        text (fio/file-stream (fio/fopen-read (first src-files)))
        compiling-fn (comp (compile-compiler parser text)
                           (compile-main parser text))
        number-type (get (types) 'Number :no-type)]
    (compiling-fn {:file-name (first src-files)
                   :debug-on true
                   :line-num 0
                   :types (types)
                   :symbols {}
                   :keywords {}
                   :numbers {}
                   :strings {}
                   :new-externs empty-list
                   :new-static-fns empty-list
                   :defined-protos {}
                   :defined-syms (reduce (seq (types)) {}
                                         (fn [m type]
                                           (assoc m
                                             (first type)
                                             (list (str "Number _num_" (second type))
                                                   (c-code (str "(Value *)&_num_" (second type))
                                                           empty-list "" number-type)))))
                   :num-count (inc (count (seq (types))))})
    (fio/close-stream text)))

(main [argList]
      (compile-module (rest argList)))
