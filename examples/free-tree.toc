
(add-ns st (module "core/state.toc"))

(defn tree-node [v]
  (cond
   (= v :list) (apply-to (fn [node-count]
                           (fn [& sub-nodes]
                             (let [node-name (str "node_" node-count)]
                               (println node-name "[label=\"\"];")
                               (map sub-nodes
                                    (fn [sub-node]
                                      (println (str node-name " -- " sub-node ";"))))
                               node-name)))
                 (st/update-state inc))
   (apply-to (fn [node-count]
               (let [node-name (str "node_" node-count)]
                 (println (str node-name " [label=\"" v "\"];"))
                 node-name))
             (st/update-state inc))))

(main [_]
      (let [tree (apply-to :list
                           (free 9)
                           (free 3)
                           (apply-to :list
                                     (free 5)
                                     (free 1)
                                     (apply-to :list
                                               (free 7)
                                               (free 6)
                                               (free 4)))
                           (free 2)
                           (free 0))]
        (println "graph graphname {")
        ((evaluate tree tree-node) 0)
        (println "}")))
